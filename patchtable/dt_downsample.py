
"""
Generates dt_downsample.h which is included by patchtable.h
"""

import sys
from gck import dimL

def main():
    f = open('dt_downsample.h', 'wt')
    
    print >> f, r"""
/* Generated by dt_downsample.py, do not hand edit */

#ifndef _dt_downsample_h
#define _dt_downsample_h
"""
    print >> f, r"""
template<class itype>
void dt_downsample(const Array<itype> &hi_table, Array<itype> &lo_table) {
    if (0) { }
        """

    def enum_loops_header(dim, resize, str_id):
        print >> f, r"""
        vector<vector<int> > hi_max(%(dim)d);
        vector<int> lo_sizes(%(dim)d);
        for (int i = 0; i < %(dim)d; i++) {
            lo_sizes[i] = (hi_table.sizes[i]+1)/2;
            for (int lo_coord = 0; lo_coord < lo_sizes[i]; lo_coord++) {
                hi_max[i].push_back(MIN(2*(lo_coord+1), hi_table.sizes[i]));
            }
        }
        """ % locals()
        
        if resize:
            print >> f, r"""
            lo_table.resize(lo_sizes);
            """
        else:
            print >> f, r"""
            ASSERT2(lo_table.sizes == lo_sizes, "expected lo_table sizes to match lo_sizes");
            """
        
        for i in range(dim):
            prev = '0';
            if i > 0:
                prev = 'lo_index%d' % (i-1)
            print >> f, r"""
            for (int lo_coord%(i)d = 0; lo_coord%(i)d < lo_sizes[%(i)d]; lo_coord%(i)d++) {
                int lo_index%(i)d = %(prev)s + lo_coord%(i)d*lo_table.stride[%(i)d];
            """ % locals()
            
            if i == dim-1:
                print >> f, r"""
                ASSERT(in_bounds(lo_index%(i)d, lo_table.nelems), "expected lo_index in bounds in %(str_id)s");
                """ % locals()
                
        for i in range(dim):
            prev = '0'
            if i > 0:
                prev = 'hi_index%d' % (i-1)
            print >> f, r"""
                int hi_max_%(i)d = hi_max[%(i)d][lo_coord%(i)d];
                for (int hi_coord%(i)d = lo_coord%(i)d*2; hi_coord%(i)d < hi_max_%(i)d; hi_coord%(i)d++) {
                    ASSERT(in_bounds(hi_coord%(i)d, hi_table.sizes[%(i)d]), "expected hi_coord%(i)d in bounds in %(str_id)s");
                    int hi_index%(i)d = %(prev)s + hi_coord%(i)d*hi_table.stride[%(i)d];
            """ % locals()
            
            if i == dim-1:
                print >> f, r"""
                ASSERT(in_bounds(hi_index%(i)d, hi_table.nelems), "expected hi_index in bounds in %(str_id)s");
                """ % locals()
                
    def enum_loops_trailer(dim, end_label):
        if len(end_label):
            end_label += ':\n(void) (NULL);'
        for i in range(dim):
            print >> f, r"""
                }
            """

        print >> f, r"""
                %(end_label)s
        """ % locals()
        
        for i in range(dim):
            print >> f, r"""
            }
            """

    for dim in dimL:
        print >> f, """
    else if (hi_table.sizes.size() == %(dim)d) {
        """ % locals()
        
        # -----------------------------------------------------------------------------------
        # Downsample
        # -----------------------------------------------------------------------------------
        
        end_label = 'stop_downsample_%d' % dim
                        
        enum_loops_header(dim, True, 'dt_downsample')
        
        lo_index = 'lo_index%d'%(dim-1)
        hi_index = 'hi_index%d'%(dim-1)
        
        print >> f, r"""
                    itype v = hi_table.data[%(hi_index)s];
                    if (!(v & TABLE_HI_MASK) && v != TABLE_UNUSED) {
                        lo_table.data[%(lo_index)s] = v;
                        goto %(end_label)s;
                    }
        """ % locals()
        
        enum_loops_trailer(dim, 'lo_table.data[%(lo_index)s] = TABLE_UNUSED; '%locals() + end_label)
        
        print >> f, r"""
    }
        """

    print >> f, r"""
    else { fprintf(stderr, "dimension unsupported in dt_downsample: %d\n", hi_table.sizes.size()); ASSERT2(false, "dim unsupported"); }
}
    """

    # -----------------------------------------------------------------------------------
    # Upsample
    # -----------------------------------------------------------------------------------
                
    print >> f, r"""
template<class itype>
void dt_upsample(const Array<itype> &lo_table, Array<itype> &hi_table) {
    if (0) { }
    """

    for dim in dimL:
        print >> f, """
    else if (hi_table.sizes.size() == %(dim)d) {
        """ % locals()

        enum_loops_header(dim, False, 'dt_upsample')
        
        lo_index = 'lo_index%d'%(dim-1)
        hi_index = 'hi_index%d'%(dim-1)
        
        print >> f, r"""
                    itype v = hi_table.data[%(hi_index)s];
                    if (v == TABLE_UNUSED) {
                        hi_table.data[%(hi_index)s] = lo_table.data[%(lo_index)s];
                    }
        """ % locals()
        
        enum_loops_trailer(dim, '')
        print >> f, """
    }
    """
    
    print >> f, r"""
    else { fprintf(stderr, "dimension unsupported in dt_upsample: %d\n", hi_table.sizes.size()); ASSERT2(false, "dim unsupported"); }
}
    """
        
    print >> f, """
#endif
    """
        
if __name__ == '__main__':
    main()

