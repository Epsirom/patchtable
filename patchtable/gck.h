
/*

Grey Code Kernels -- 2D Walsh-Hadamard kernels
File gck.h is generated by gck.py (do not hand-edit gck.h)

Interface:

   template<class in_type, class out_type>
   void gck(const Array<in_type> &in, Array<out_type> &out, int n, int nchroma, int patch_w);

See: http://www.faculty.idc.ac.il/toky/publications/journal/gck.pdf

The kernels are computed in "snake" order (see Fig 7). The input image
is assumed to have 3 channels, and the output image has 3*n channels,
where n is the number of requested kernels. If nchroma != n then the
output image has n+nchroma*2 channels.

*/

#ifndef _gck_h
#define _gck_h
    
#define ASSIGN_ARRAY 1
#define ARRAY_USE_OPENCV 1
#include "../solver/array.h"
        
/* gck_8<in_type, out_type, n>(in, out) -- Convolve by n 8 x 8 kernels (per channel) */
template<class in_type, class out_type, int n, int nchroma> void gck_8(const Array<in_type> &in, Array<out_type> &out) {
#if TABLE_EXTRA_VERBOSE
    printf("gck_8()\n"); fflush(stdout);
#endif
    ASSERT2(3 == in.channels(), "expected input to have 3 channels");

    /* Compute full convolution, so pad right side by rpad and left side by lpad.
       Each kernel reads lread entries to the left of the output pixel and rread entries to the right (same for above/below). */
    
    const int rpad = 8/2;
    const int lpad = rpad-1;
    const int lread = rpad, rread = lpad;
    const int pad = lpad+rpad;
        
    
    const int out_channels = n+nchroma*2;
    static Array<out_type> temp;
    out.resize(in.height()+pad, in.width()+pad, out_channels);
    temp.resize(out.height(), out.width(), 3);
    
#if TABLE_EXTRA_VERBOSE
    double T0 = wall_time();
    printf("gck begin H conv()\n"); fflush(stdout);
#endif

     /* Compute kernel 0 (box of size w x w). First convolve horizontally into temp. */
    int hconv_xmin = 2*rpad;
    int hconv_xmax = in.width()+lpad-rread;
    int hconv_ymin = lpad;
    int hconv_ymax = in.height()+lpad;
    
    for (int y = 0; y < hconv_ymin; y++) {
        
        
        int ysrc = y-lpad;
        {
            for (int c = 0; c < 3; c++) {
                temp(y, 0, c) = in.get_zero(ysrc, 0, c);
            }
        }
        
#if TABLE_EXTRA_VERBOSE
        printf("gck second pixel in row\n"); fflush(stdout);
#endif
        for (int x = 1; x < out.width(); x++) {
            
            int xsrc = x-lpad;
            for (int c = 0; c < 3; c++) {
                temp(y, x, c) = temp(y, x-1, c) + ((out_type) in.get_zero(ysrc, xsrc+rread, c)) - ((out_type) in.get_zero(ysrc, xsrc-lread-1, c));
            }
        
        }
#if TABLE_EXTRA_VERBOSE
        printf("done with row\n"); fflush(stdout);
#endif
        
    }
#if TABLE_EXTRA_VERBOSE
    printf("gck mid H conv()\n"); fflush(stdout);
#endif

#if TABLE_OPENMP
#pragma omp parallel for
#endif
    for (int y = hconv_ymin; y < hconv_ymax; y++) {
        
        int ysrc = y-lpad;
        {
            for (int c = 0; c < 3; c++) {
                temp(y, 0, c) = in.get_zero(ysrc, 0, c);
            }
        }
        

        out_type *temp_x = &temp(y, 0, 0);
        out_type *temp_x1 = &temp.get_unsafe(y, -1, 0);
        const in_type *in_right = &in.get_unsafe(ysrc, -lpad+rread, 0);
        const in_type *in_left = &in.get_unsafe(ysrc, -lpad-lread-1, 0);

        for (int x = 1; x < hconv_xmin; x++) {
            
            int xsrc = x-lpad;
            for (int c = 0; c < 3; c++) {
                temp(y, x, c) = temp(y, x-1, c) + ((out_type) in.get_zero(ysrc, xsrc+rread, c)) - ((out_type) in.get_zero(ysrc, xsrc-lread-1, c));
            }
        
        }
        for (int x = hconv_xmin; x < hconv_xmax; x++) {
            for (int c = 0; c < 3; c++) {
                temp_x[x*3+c] = temp_x1[x*3+c] + ((out_type) in_right[x*3+c]) - ((out_type) in_left[x*3+c]);
            }
        }
        for (int x = hconv_xmax; x < out.width(); x++) {
            
            int xsrc = x-lpad;
            for (int c = 0; c < 3; c++) {
                temp(y, x, c) = temp(y, x-1, c) + ((out_type) in.get_zero(ysrc, xsrc+rread, c)) - ((out_type) in.get_zero(ysrc, xsrc-lread-1, c));
            }
        
        }
    }
#if TABLE_EXTRA_VERBOSE
    printf("gck last part of H conv()\n"); fflush(stdout);
#endif

    for (int y = hconv_ymax; y < out.height(); y++) {
        
        
        int ysrc = y-lpad;
        {
            for (int c = 0; c < 3; c++) {
                temp(y, 0, c) = in.get_zero(ysrc, 0, c);
            }
        }
        
#if TABLE_EXTRA_VERBOSE
        printf("gck second pixel in row\n"); fflush(stdout);
#endif
        for (int x = 1; x < out.width(); x++) {
            
            int xsrc = x-lpad;
            for (int c = 0; c < 3; c++) {
                temp(y, x, c) = temp(y, x-1, c) + ((out_type) in.get_zero(ysrc, xsrc+rread, c)) - ((out_type) in.get_zero(ysrc, xsrc-lread-1, c));
            }
        
        }
#if TABLE_EXTRA_VERBOSE
        printf("done with row\n"); fflush(stdout);
#endif
        
    }

#if TABLE_EXTRA_VERBOSE
    printf("gck begin V conv()\n"); fflush(stdout);
    double T1 = wall_time();
#endif

    /* Convolve vertically into first kernel output. */
    {
        for (int x = 0; x < out.width(); x++) {
            for (int c = 0; c < 3; c++) {
                out(0, x, c) = temp(rread, x, c);
            }
        }
    }
    int vconv_ymax = out.height()-rread;
    int vconv_ymin = lread+1;
    
    for (int y = 1; y < vconv_ymin; y++) {
        
        for (int x = 0; x < out.width(); x++) {
            for (int c = 0; c < 3; c++) {
                out(y, x, c) = out(y-1, x, c) + ((out_type) temp.get_zero(y+rread, x, c)) - ((out_type) temp.get_zero(y-lread-1, x, c));
            }
        }
        
    }
#if TABLE_EXTRA_VERBOSE
    printf("gck mid V conv()\n"); fflush(stdout);
#endif
    for (int y = vconv_ymin; y < vconv_ymax; y++) {
        out_type *out_y = &out(y, 0, 0);
        out_type *out_y1 = &out.get_unsafe(y-1, 0, 0);
        out_type *temp_right = &temp.get_unsafe(y+rread, 0, 0);
        out_type *temp_left = &temp.get_unsafe(y-lread-1, 0, 0);
        for (int x = 0; x < out.width(); x++) {
            for (int c = 0; c < 3; c++) {
                out_y[x*out_channels+c] = out_y1[x*out_channels+c] + temp_right[x*3+c] - temp_left[x*3+c];
            }
        }
    }
#if TABLE_EXTRA_VERBOSE
    printf("gck last part V conv()\n"); fflush(stdout);
#endif
    for (int y = vconv_ymax; y < out.height(); y++) {
        
        for (int x = 0; x < out.width(); x++) {
            for (int c = 0; c < 3; c++) {
                out(y, x, c) = out(y-1, x, c) + ((out_type) temp.get_zero(y+rread, x, c)) - ((out_type) temp.get_zero(y-lread-1, x, c));
            }
        }
        
    }
#if TABLE_EXTRA_VERBOSE
    double T2 = wall_time();
    printf("gck H conv time: %f\n", T1-T0);
    printf("gck V conv time: %f\n", T2-T1);
#endif
    
        
#if TABLE_EXTRA_VERBOSE
    printf("gck y first part\n"); fflush(stdout);
#endif
    for (int y = 0; y < 4; y++) {
        for (int x = 0; x < out.width(); x++) {
            
                /* Kernel 2 */
                if (n > 1) {
                    for (int c = 0; c < (1 < nchroma ? 3: 1); c++) {
                        out(y, x, (1 < nchroma ? 1*3: nchroma*3+(1-nchroma))+c) = -1 * out.get_zero(y, x-4, (1 < nchroma ? 1*3: nchroma*3+(1-nchroma))+c) +
                                                      out(y, x, (0 < nchroma ? 0*3: nchroma*3+(0-nchroma))+c) +
                                                      -1 * out.get_zero(y, x-4, (0 < nchroma ? 0*3: nchroma*3+(0-nchroma))+c);
                    }
                }
                
                /* Kernel 3 */
                if (n > 2) {
                    for (int c = 0; c < (2 < nchroma ? 3: 1); c++) {
                        out(y, x, (2 < nchroma ? 2*3: nchroma*3+(2-nchroma))+c) = -1 * out.get_zero(y-4, x, (2 < nchroma ? 2*3: nchroma*3+(2-nchroma))+c) +
                                                      out(y, x, (1 < nchroma ? 1*3: nchroma*3+(1-nchroma))+c) +
                                                      -1 * out.get_zero(y-4, x, (1 < nchroma ? 1*3: nchroma*3+(1-nchroma))+c);
                    }
                }
                
                /* Kernel 4 */
                if (n > 3) {
                    for (int c = 0; c < (3 < nchroma ? 3: 1); c++) {
                        out(y, x, (3 < nchroma ? 3*3: nchroma*3+(3-nchroma))+c) = 1 * out.get_zero(y, x-4, (3 < nchroma ? 3*3: nchroma*3+(3-nchroma))+c) +
                                                      out(y, x, (2 < nchroma ? 2*3: nchroma*3+(2-nchroma))+c) +
                                                      1 * out.get_zero(y, x-4, (2 < nchroma ? 2*3: nchroma*3+(2-nchroma))+c);
                    }
                }
                
                /* Kernel 5 */
                if (n > 4) {
                    for (int c = 0; c < (4 < nchroma ? 3: 1); c++) {
                        out(y, x, (4 < nchroma ? 4*3: nchroma*3+(4-nchroma))+c) = -1 * out.get_zero(y-2, x, (4 < nchroma ? 4*3: nchroma*3+(4-nchroma))+c) +
                                                      out(y, x, (3 < nchroma ? 3*3: nchroma*3+(3-nchroma))+c) +
                                                      -1 * out.get_zero(y-2, x, (3 < nchroma ? 3*3: nchroma*3+(3-nchroma))+c);
                    }
                }
                
                /* Kernel 6 */
                if (n > 5) {
                    for (int c = 0; c < (5 < nchroma ? 3: 1); c++) {
                        out(y, x, (5 < nchroma ? 5*3: nchroma*3+(5-nchroma))+c) = -1 * out.get_zero(y, x-4, (5 < nchroma ? 5*3: nchroma*3+(5-nchroma))+c) +
                                                      out(y, x, (4 < nchroma ? 4*3: nchroma*3+(4-nchroma))+c) +
                                                      -1 * out.get_zero(y, x-4, (4 < nchroma ? 4*3: nchroma*3+(4-nchroma))+c);
                    }
                }
                
                /* Kernel 7 */
                if (n > 6) {
                    for (int c = 0; c < (6 < nchroma ? 3: 1); c++) {
                        out(y, x, (6 < nchroma ? 6*3: nchroma*3+(6-nchroma))+c) = -1 * out.get_zero(y, x-2, (6 < nchroma ? 6*3: nchroma*3+(6-nchroma))+c) +
                                                      out(y, x, (5 < nchroma ? 5*3: nchroma*3+(5-nchroma))+c) +
                                                      -1 * out.get_zero(y, x-2, (5 < nchroma ? 5*3: nchroma*3+(5-nchroma))+c);
                    }
                }
                
                /* Kernel 8 */
                if (n > 7) {
                    for (int c = 0; c < (7 < nchroma ? 3: 1); c++) {
                        out(y, x, (7 < nchroma ? 7*3: nchroma*3+(7-nchroma))+c) = 1 * out.get_zero(y-2, x, (7 < nchroma ? 7*3: nchroma*3+(7-nchroma))+c) +
                                                      out(y, x, (6 < nchroma ? 6*3: nchroma*3+(6-nchroma))+c) +
                                                      1 * out.get_zero(y-2, x, (6 < nchroma ? 6*3: nchroma*3+(6-nchroma))+c);
                    }
                }
                
                /* Kernel 9 */
                if (n > 8) {
                    for (int c = 0; c < (8 < nchroma ? 3: 1); c++) {
                        out(y, x, (8 < nchroma ? 8*3: nchroma*3+(8-nchroma))+c) = 1 * out.get_zero(y-4, x, (8 < nchroma ? 8*3: nchroma*3+(8-nchroma))+c) +
                                                      out(y, x, (7 < nchroma ? 7*3: nchroma*3+(7-nchroma))+c) +
                                                      1 * out.get_zero(y-4, x, (7 < nchroma ? 7*3: nchroma*3+(7-nchroma))+c);
                    }
                }
                
                /* Kernel 10 */
                if (n > 9) {
                    for (int c = 0; c < (9 < nchroma ? 3: 1); c++) {
                        out(y, x, (9 < nchroma ? 9*3: nchroma*3+(9-nchroma))+c) = 1 * out.get_zero(y, x-4, (9 < nchroma ? 9*3: nchroma*3+(9-nchroma))+c) +
                                                      out(y, x, (8 < nchroma ? 8*3: nchroma*3+(8-nchroma))+c) +
                                                      1 * out.get_zero(y, x-4, (8 < nchroma ? 8*3: nchroma*3+(8-nchroma))+c);
                    }
                }
                
                /* Kernel 11 */
                if (n > 10) {
                    for (int c = 0; c < (10 < nchroma ? 3: 1); c++) {
                        out(y, x, (10 < nchroma ? 10*3: nchroma*3+(10-nchroma))+c) = -1 * out.get_zero(y-4, x, (10 < nchroma ? 10*3: nchroma*3+(10-nchroma))+c) +
                                                      out(y, x, (9 < nchroma ? 9*3: nchroma*3+(9-nchroma))+c) +
                                                      -1 * out.get_zero(y-4, x, (9 < nchroma ? 9*3: nchroma*3+(9-nchroma))+c);
                    }
                }
                
                /* Kernel 12 */
                if (n > 11) {
                    for (int c = 0; c < (11 < nchroma ? 3: 1); c++) {
                        out(y, x, (11 < nchroma ? 11*3: nchroma*3+(11-nchroma))+c) = -1 * out.get_zero(y-2, x, (11 < nchroma ? 11*3: nchroma*3+(11-nchroma))+c) +
                                                      out(y, x, (10 < nchroma ? 10*3: nchroma*3+(10-nchroma))+c) +
                                                      -1 * out.get_zero(y-2, x, (10 < nchroma ? 10*3: nchroma*3+(10-nchroma))+c);
                    }
                }
                
                /* Kernel 13 */
                if (n > 12) {
                    for (int c = 0; c < (12 < nchroma ? 3: 1); c++) {
                        out(y, x, (12 < nchroma ? 12*3: nchroma*3+(12-nchroma))+c) = 1 * out.get_zero(y-4, x, (12 < nchroma ? 12*3: nchroma*3+(12-nchroma))+c) +
                                                      out(y, x, (11 < nchroma ? 11*3: nchroma*3+(11-nchroma))+c) +
                                                      1 * out.get_zero(y-4, x, (11 < nchroma ? 11*3: nchroma*3+(11-nchroma))+c);
                    }
                }
                
                /* Kernel 14 */
                if (n > 13) {
                    for (int c = 0; c < (13 < nchroma ? 3: 1); c++) {
                        out(y, x, (13 < nchroma ? 13*3: nchroma*3+(13-nchroma))+c) = -1 * out.get_zero(y, x-4, (13 < nchroma ? 13*3: nchroma*3+(13-nchroma))+c) +
                                                      out(y, x, (12 < nchroma ? 12*3: nchroma*3+(12-nchroma))+c) +
                                                      -1 * out.get_zero(y, x-4, (12 < nchroma ? 12*3: nchroma*3+(12-nchroma))+c);
                    }
                }
                
                /* Kernel 15 */
                if (n > 14) {
                    for (int c = 0; c < (14 < nchroma ? 3: 1); c++) {
                        out(y, x, (14 < nchroma ? 14*3: nchroma*3+(14-nchroma))+c) = 1 * out.get_zero(y, x-2, (14 < nchroma ? 14*3: nchroma*3+(14-nchroma))+c) +
                                                      out(y, x, (13 < nchroma ? 13*3: nchroma*3+(13-nchroma))+c) +
                                                      1 * out.get_zero(y, x-2, (13 < nchroma ? 13*3: nchroma*3+(13-nchroma))+c);
                    }
                }
                
                /* Kernel 16 */
                if (n > 15) {
                    for (int c = 0; c < (15 < nchroma ? 3: 1); c++) {
                        out(y, x, (15 < nchroma ? 15*3: nchroma*3+(15-nchroma))+c) = 1 * out.get_zero(y, x-4, (15 < nchroma ? 15*3: nchroma*3+(15-nchroma))+c) +
                                                      out(y, x, (14 < nchroma ? 14*3: nchroma*3+(14-nchroma))+c) +
                                                      1 * out.get_zero(y, x-4, (14 < nchroma ? 14*3: nchroma*3+(14-nchroma))+c);
                    }
                }
                
                /* Kernel 17 */
                if (n > 16) {
                    for (int c = 0; c < (16 < nchroma ? 3: 1); c++) {
                        out(y, x, (16 < nchroma ? 16*3: nchroma*3+(16-nchroma))+c) = -1 * out.get_zero(y-1, x, (16 < nchroma ? 16*3: nchroma*3+(16-nchroma))+c) +
                                                      out(y, x, (15 < nchroma ? 15*3: nchroma*3+(15-nchroma))+c) +
                                                      -1 * out.get_zero(y-1, x, (15 < nchroma ? 15*3: nchroma*3+(15-nchroma))+c);
                    }
                }
                
                /* Kernel 18 */
                if (n > 17) {
                    for (int c = 0; c < (17 < nchroma ? 3: 1); c++) {
                        out(y, x, (17 < nchroma ? 17*3: nchroma*3+(17-nchroma))+c) = -1 * out.get_zero(y, x-4, (17 < nchroma ? 17*3: nchroma*3+(17-nchroma))+c) +
                                                      out(y, x, (16 < nchroma ? 16*3: nchroma*3+(16-nchroma))+c) +
                                                      -1 * out.get_zero(y, x-4, (16 < nchroma ? 16*3: nchroma*3+(16-nchroma))+c);
                    }
                }
                
                /* Kernel 19 */
                if (n > 18) {
                    for (int c = 0; c < (18 < nchroma ? 3: 1); c++) {
                        out(y, x, (18 < nchroma ? 18*3: nchroma*3+(18-nchroma))+c) = -1 * out.get_zero(y, x-2, (18 < nchroma ? 18*3: nchroma*3+(18-nchroma))+c) +
                                                      out(y, x, (17 < nchroma ? 17*3: nchroma*3+(17-nchroma))+c) +
                                                      -1 * out.get_zero(y, x-2, (17 < nchroma ? 17*3: nchroma*3+(17-nchroma))+c);
                    }
                }
                
                /* Kernel 20 */
                if (n > 19) {
                    for (int c = 0; c < (19 < nchroma ? 3: 1); c++) {
                        out(y, x, (19 < nchroma ? 19*3: nchroma*3+(19-nchroma))+c) = 1 * out.get_zero(y, x-4, (19 < nchroma ? 19*3: nchroma*3+(19-nchroma))+c) +
                                                      out(y, x, (18 < nchroma ? 18*3: nchroma*3+(18-nchroma))+c) +
                                                      1 * out.get_zero(y, x-4, (18 < nchroma ? 18*3: nchroma*3+(18-nchroma))+c);
                    }
                }
                
                /* Kernel 21 */
                if (n > 20) {
                    for (int c = 0; c < (20 < nchroma ? 3: 1); c++) {
                        out(y, x, (20 < nchroma ? 20*3: nchroma*3+(20-nchroma))+c) = -1 * out.get_zero(y, x-1, (20 < nchroma ? 20*3: nchroma*3+(20-nchroma))+c) +
                                                      out(y, x, (19 < nchroma ? 19*3: nchroma*3+(19-nchroma))+c) +
                                                      -1 * out.get_zero(y, x-1, (19 < nchroma ? 19*3: nchroma*3+(19-nchroma))+c);
                    }
                }
                
                /* Kernel 22 */
                if (n > 21) {
                    for (int c = 0; c < (21 < nchroma ? 3: 1); c++) {
                        out(y, x, (21 < nchroma ? 21*3: nchroma*3+(21-nchroma))+c) = 1 * out.get_zero(y-1, x, (21 < nchroma ? 21*3: nchroma*3+(21-nchroma))+c) +
                                                      out(y, x, (20 < nchroma ? 20*3: nchroma*3+(20-nchroma))+c) +
                                                      1 * out.get_zero(y-1, x, (20 < nchroma ? 20*3: nchroma*3+(20-nchroma))+c);
                    }
                }
                
                /* Kernel 23 */
                if (n > 22) {
                    for (int c = 0; c < (22 < nchroma ? 3: 1); c++) {
                        out(y, x, (22 < nchroma ? 22*3: nchroma*3+(22-nchroma))+c) = -1 * out.get_zero(y-4, x, (22 < nchroma ? 22*3: nchroma*3+(22-nchroma))+c) +
                                                      out(y, x, (21 < nchroma ? 21*3: nchroma*3+(21-nchroma))+c) +
                                                      -1 * out.get_zero(y-4, x, (21 < nchroma ? 21*3: nchroma*3+(21-nchroma))+c);
                    }
                }
                
                /* Kernel 24 */
                if (n > 23) {
                    for (int c = 0; c < (23 < nchroma ? 3: 1); c++) {
                        out(y, x, (23 < nchroma ? 23*3: nchroma*3+(23-nchroma))+c) = 1 * out.get_zero(y-2, x, (23 < nchroma ? 23*3: nchroma*3+(23-nchroma))+c) +
                                                      out(y, x, (22 < nchroma ? 22*3: nchroma*3+(22-nchroma))+c) +
                                                      1 * out.get_zero(y-2, x, (22 < nchroma ? 22*3: nchroma*3+(22-nchroma))+c);
                    }
                }
                
                /* Kernel 25 */
                if (n > 24) {
                    for (int c = 0; c < (24 < nchroma ? 3: 1); c++) {
                        out(y, x, (24 < nchroma ? 24*3: nchroma*3+(24-nchroma))+c) = 1 * out.get_zero(y-4, x, (24 < nchroma ? 24*3: nchroma*3+(24-nchroma))+c) +
                                                      out(y, x, (23 < nchroma ? 23*3: nchroma*3+(23-nchroma))+c) +
                                                      1 * out.get_zero(y-4, x, (23 < nchroma ? 23*3: nchroma*3+(23-nchroma))+c);
                    }
                }
                
                /* Kernel 26 */
                if (n > 25) {
                    for (int c = 0; c < (25 < nchroma ? 3: 1); c++) {
                        out(y, x, (25 < nchroma ? 25*3: nchroma*3+(25-nchroma))+c) = -1 * out.get_zero(y, x-4, (25 < nchroma ? 25*3: nchroma*3+(25-nchroma))+c) +
                                                      out(y, x, (24 < nchroma ? 24*3: nchroma*3+(24-nchroma))+c) +
                                                      -1 * out.get_zero(y, x-4, (24 < nchroma ? 24*3: nchroma*3+(24-nchroma))+c);
                    }
                }
                
                /* Kernel 27 */
                if (n > 26) {
                    for (int c = 0; c < (26 < nchroma ? 3: 1); c++) {
                        out(y, x, (26 < nchroma ? 26*3: nchroma*3+(26-nchroma))+c) = -1 * out.get_zero(y-4, x, (26 < nchroma ? 26*3: nchroma*3+(26-nchroma))+c) +
                                                      out(y, x, (25 < nchroma ? 25*3: nchroma*3+(25-nchroma))+c) +
                                                      -1 * out.get_zero(y-4, x, (25 < nchroma ? 25*3: nchroma*3+(25-nchroma))+c);
                    }
                }
                
                /* Kernel 28 */
                if (n > 27) {
                    for (int c = 0; c < (27 < nchroma ? 3: 1); c++) {
                        out(y, x, (27 < nchroma ? 27*3: nchroma*3+(27-nchroma))+c) = -1 * out.get_zero(y-2, x, (27 < nchroma ? 27*3: nchroma*3+(27-nchroma))+c) +
                                                      out(y, x, (26 < nchroma ? 26*3: nchroma*3+(26-nchroma))+c) +
                                                      -1 * out.get_zero(y-2, x, (26 < nchroma ? 26*3: nchroma*3+(26-nchroma))+c);
                    }
                }
                
                /* Kernel 29 */
                if (n > 28) {
                    for (int c = 0; c < (28 < nchroma ? 3: 1); c++) {
                        out(y, x, (28 < nchroma ? 28*3: nchroma*3+(28-nchroma))+c) = 1 * out.get_zero(y-4, x, (28 < nchroma ? 28*3: nchroma*3+(28-nchroma))+c) +
                                                      out(y, x, (27 < nchroma ? 27*3: nchroma*3+(27-nchroma))+c) +
                                                      1 * out.get_zero(y-4, x, (27 < nchroma ? 27*3: nchroma*3+(27-nchroma))+c);
                    }
                }
                
                /* Kernel 30 */
                if (n > 29) {
                    for (int c = 0; c < (29 < nchroma ? 3: 1); c++) {
                        out(y, x, (29 < nchroma ? 29*3: nchroma*3+(29-nchroma))+c) = -1 * out.get_zero(y-1, x, (29 < nchroma ? 29*3: nchroma*3+(29-nchroma))+c) +
                                                      out(y, x, (28 < nchroma ? 28*3: nchroma*3+(28-nchroma))+c) +
                                                      -1 * out.get_zero(y-1, x, (28 < nchroma ? 28*3: nchroma*3+(28-nchroma))+c);
                    }
                }
                
                /* Kernel 31 */
                if (n > 30) {
                    for (int c = 0; c < (30 < nchroma ? 3: 1); c++) {
                        out(y, x, (30 < nchroma ? 30*3: nchroma*3+(30-nchroma))+c) = -1 * out.get_zero(y-4, x, (30 < nchroma ? 30*3: nchroma*3+(30-nchroma))+c) +
                                                      out(y, x, (29 < nchroma ? 29*3: nchroma*3+(29-nchroma))+c) +
                                                      -1 * out.get_zero(y-4, x, (29 < nchroma ? 29*3: nchroma*3+(29-nchroma))+c);
                    }
                }
                
                /* Kernel 32 */
                if (n > 31) {
                    for (int c = 0; c < (31 < nchroma ? 3: 1); c++) {
                        out(y, x, (31 < nchroma ? 31*3: nchroma*3+(31-nchroma))+c) = 1 * out.get_zero(y, x-4, (31 < nchroma ? 31*3: nchroma*3+(31-nchroma))+c) +
                                                      out(y, x, (30 < nchroma ? 30*3: nchroma*3+(30-nchroma))+c) +
                                                      1 * out.get_zero(y, x-4, (30 < nchroma ? 30*3: nchroma*3+(30-nchroma))+c);
                    }
                }
                
                /* Kernel 33 */
                if (n > 32) {
                    for (int c = 0; c < (32 < nchroma ? 3: 1); c++) {
                        out(y, x, (32 < nchroma ? 32*3: nchroma*3+(32-nchroma))+c) = 1 * out.get_zero(y, x-1, (32 < nchroma ? 32*3: nchroma*3+(32-nchroma))+c) +
                                                      out(y, x, (31 < nchroma ? 31*3: nchroma*3+(31-nchroma))+c) +
                                                      1 * out.get_zero(y, x-1, (31 < nchroma ? 31*3: nchroma*3+(31-nchroma))+c);
                    }
                }
                
                /* Kernel 34 */
                if (n > 33) {
                    for (int c = 0; c < (33 < nchroma ? 3: 1); c++) {
                        out(y, x, (33 < nchroma ? 33*3: nchroma*3+(33-nchroma))+c) = -1 * out.get_zero(y, x-4, (33 < nchroma ? 33*3: nchroma*3+(33-nchroma))+c) +
                                                      out(y, x, (32 < nchroma ? 32*3: nchroma*3+(32-nchroma))+c) +
                                                      -1 * out.get_zero(y, x-4, (32 < nchroma ? 32*3: nchroma*3+(32-nchroma))+c);
                    }
                }
                
                /* Kernel 35 */
                if (n > 34) {
                    for (int c = 0; c < (34 < nchroma ? 3: 1); c++) {
                        out(y, x, (34 < nchroma ? 34*3: nchroma*3+(34-nchroma))+c) = 1 * out.get_zero(y, x-2, (34 < nchroma ? 34*3: nchroma*3+(34-nchroma))+c) +
                                                      out(y, x, (33 < nchroma ? 33*3: nchroma*3+(33-nchroma))+c) +
                                                      1 * out.get_zero(y, x-2, (33 < nchroma ? 33*3: nchroma*3+(33-nchroma))+c);
                    }
                }
                
                /* Kernel 36 */
                if (n > 35) {
                    for (int c = 0; c < (35 < nchroma ? 3: 1); c++) {
                        out(y, x, (35 < nchroma ? 35*3: nchroma*3+(35-nchroma))+c) = 1 * out.get_zero(y, x-4, (35 < nchroma ? 35*3: nchroma*3+(35-nchroma))+c) +
                                                      out(y, x, (34 < nchroma ? 34*3: nchroma*3+(34-nchroma))+c) +
                                                      1 * out.get_zero(y, x-4, (34 < nchroma ? 34*3: nchroma*3+(34-nchroma))+c);
                    }
                }
                
                /* Kernel 37 */
                if (n > 36) {
                    for (int c = 0; c < (36 < nchroma ? 3: 1); c++) {
                        out(y, x, (36 < nchroma ? 36*3: nchroma*3+(36-nchroma))+c) = 1 * out.get_zero(y-2, x, (36 < nchroma ? 36*3: nchroma*3+(36-nchroma))+c) +
                                                      out(y, x, (35 < nchroma ? 35*3: nchroma*3+(35-nchroma))+c) +
                                                      1 * out.get_zero(y-2, x, (35 < nchroma ? 35*3: nchroma*3+(35-nchroma))+c);
                    }
                }
                
                /* Kernel 38 */
                if (n > 37) {
                    for (int c = 0; c < (37 < nchroma ? 3: 1); c++) {
                        out(y, x, (37 < nchroma ? 37*3: nchroma*3+(37-nchroma))+c) = -1 * out.get_zero(y, x-4, (37 < nchroma ? 37*3: nchroma*3+(37-nchroma))+c) +
                                                      out(y, x, (36 < nchroma ? 36*3: nchroma*3+(36-nchroma))+c) +
                                                      -1 * out.get_zero(y, x-4, (36 < nchroma ? 36*3: nchroma*3+(36-nchroma))+c);
                    }
                }
                
                /* Kernel 39 */
                if (n > 38) {
                    for (int c = 0; c < (38 < nchroma ? 3: 1); c++) {
                        out(y, x, (38 < nchroma ? 38*3: nchroma*3+(38-nchroma))+c) = -1 * out.get_zero(y, x-2, (38 < nchroma ? 38*3: nchroma*3+(38-nchroma))+c) +
                                                      out(y, x, (37 < nchroma ? 37*3: nchroma*3+(37-nchroma))+c) +
                                                      -1 * out.get_zero(y, x-2, (37 < nchroma ? 37*3: nchroma*3+(37-nchroma))+c);
                    }
                }
                
                /* Kernel 40 */
                if (n > 39) {
                    for (int c = 0; c < (39 < nchroma ? 3: 1); c++) {
                        out(y, x, (39 < nchroma ? 39*3: nchroma*3+(39-nchroma))+c) = 1 * out.get_zero(y, x-4, (39 < nchroma ? 39*3: nchroma*3+(39-nchroma))+c) +
                                                      out(y, x, (38 < nchroma ? 38*3: nchroma*3+(38-nchroma))+c) +
                                                      1 * out.get_zero(y, x-4, (38 < nchroma ? 38*3: nchroma*3+(38-nchroma))+c);
                    }
                }
                
                /* Kernel 41 */
                if (n > 40) {
                    for (int c = 0; c < (40 < nchroma ? 3: 1); c++) {
                        out(y, x, (40 < nchroma ? 40*3: nchroma*3+(40-nchroma))+c) = -1 * out.get_zero(y, x-1, (40 < nchroma ? 40*3: nchroma*3+(40-nchroma))+c) +
                                                      out(y, x, (39 < nchroma ? 39*3: nchroma*3+(39-nchroma))+c) +
                                                      -1 * out.get_zero(y, x-1, (39 < nchroma ? 39*3: nchroma*3+(39-nchroma))+c);
                    }
                }
                
                /* Kernel 42 */
                if (n > 41) {
                    for (int c = 0; c < (41 < nchroma ? 3: 1); c++) {
                        out(y, x, (41 < nchroma ? 41*3: nchroma*3+(41-nchroma))+c) = -1 * out.get_zero(y, x-4, (41 < nchroma ? 41*3: nchroma*3+(41-nchroma))+c) +
                                                      out(y, x, (40 < nchroma ? 40*3: nchroma*3+(40-nchroma))+c) +
                                                      -1 * out.get_zero(y, x-4, (40 < nchroma ? 40*3: nchroma*3+(40-nchroma))+c);
                    }
                }
                
                /* Kernel 43 */
                if (n > 42) {
                    for (int c = 0; c < (42 < nchroma ? 3: 1); c++) {
                        out(y, x, (42 < nchroma ? 42*3: nchroma*3+(42-nchroma))+c) = 1 * out.get_zero(y, x-2, (42 < nchroma ? 42*3: nchroma*3+(42-nchroma))+c) +
                                                      out(y, x, (41 < nchroma ? 41*3: nchroma*3+(41-nchroma))+c) +
                                                      1 * out.get_zero(y, x-2, (41 < nchroma ? 41*3: nchroma*3+(41-nchroma))+c);
                    }
                }
                
                /* Kernel 44 */
                if (n > 43) {
                    for (int c = 0; c < (43 < nchroma ? 3: 1); c++) {
                        out(y, x, (43 < nchroma ? 43*3: nchroma*3+(43-nchroma))+c) = -1 * out.get_zero(y-2, x, (43 < nchroma ? 43*3: nchroma*3+(43-nchroma))+c) +
                                                      out(y, x, (42 < nchroma ? 42*3: nchroma*3+(42-nchroma))+c) +
                                                      -1 * out.get_zero(y-2, x, (42 < nchroma ? 42*3: nchroma*3+(42-nchroma))+c);
                    }
                }
                
                /* Kernel 45 */
                if (n > 44) {
                    for (int c = 0; c < (44 < nchroma ? 3: 1); c++) {
                        out(y, x, (44 < nchroma ? 44*3: nchroma*3+(44-nchroma))+c) = 1 * out.get_zero(y-4, x, (44 < nchroma ? 44*3: nchroma*3+(44-nchroma))+c) +
                                                      out(y, x, (43 < nchroma ? 43*3: nchroma*3+(43-nchroma))+c) +
                                                      1 * out.get_zero(y-4, x, (43 < nchroma ? 43*3: nchroma*3+(43-nchroma))+c);
                    }
                }
                
                /* Kernel 46 */
                if (n > 45) {
                    for (int c = 0; c < (45 < nchroma ? 3: 1); c++) {
                        out(y, x, (45 < nchroma ? 45*3: nchroma*3+(45-nchroma))+c) = 1 * out.get_zero(y-1, x, (45 < nchroma ? 45*3: nchroma*3+(45-nchroma))+c) +
                                                      out(y, x, (44 < nchroma ? 44*3: nchroma*3+(44-nchroma))+c) +
                                                      1 * out.get_zero(y-1, x, (44 < nchroma ? 44*3: nchroma*3+(44-nchroma))+c);
                    }
                }
                
                /* Kernel 47 */
                if (n > 46) {
                    for (int c = 0; c < (46 < nchroma ? 3: 1); c++) {
                        out(y, x, (46 < nchroma ? 46*3: nchroma*3+(46-nchroma))+c) = -1 * out.get_zero(y-4, x, (46 < nchroma ? 46*3: nchroma*3+(46-nchroma))+c) +
                                                      out(y, x, (45 < nchroma ? 45*3: nchroma*3+(45-nchroma))+c) +
                                                      -1 * out.get_zero(y-4, x, (45 < nchroma ? 45*3: nchroma*3+(45-nchroma))+c);
                    }
                }
                
                /* Kernel 48 */
                if (n > 47) {
                    for (int c = 0; c < (47 < nchroma ? 3: 1); c++) {
                        out(y, x, (47 < nchroma ? 47*3: nchroma*3+(47-nchroma))+c) = 1 * out.get_zero(y-2, x, (47 < nchroma ? 47*3: nchroma*3+(47-nchroma))+c) +
                                                      out(y, x, (46 < nchroma ? 46*3: nchroma*3+(46-nchroma))+c) +
                                                      1 * out.get_zero(y-2, x, (46 < nchroma ? 46*3: nchroma*3+(46-nchroma))+c);
                    }
                }
                
                /* Kernel 49 */
                if (n > 48) {
                    for (int c = 0; c < (48 < nchroma ? 3: 1); c++) {
                        out(y, x, (48 < nchroma ? 48*3: nchroma*3+(48-nchroma))+c) = 1 * out.get_zero(y-4, x, (48 < nchroma ? 48*3: nchroma*3+(48-nchroma))+c) +
                                                      out(y, x, (47 < nchroma ? 47*3: nchroma*3+(47-nchroma))+c) +
                                                      1 * out.get_zero(y-4, x, (47 < nchroma ? 47*3: nchroma*3+(47-nchroma))+c);
                    }
                }
                
                /* Kernel 50 */
                if (n > 49) {
                    for (int c = 0; c < (49 < nchroma ? 3: 1); c++) {
                        out(y, x, (49 < nchroma ? 49*3: nchroma*3+(49-nchroma))+c) = 1 * out.get_zero(y, x-4, (49 < nchroma ? 49*3: nchroma*3+(49-nchroma))+c) +
                                                      out(y, x, (48 < nchroma ? 48*3: nchroma*3+(48-nchroma))+c) +
                                                      1 * out.get_zero(y, x-4, (48 < nchroma ? 48*3: nchroma*3+(48-nchroma))+c);
                    }
                }
                
                /* Kernel 51 */
                if (n > 50) {
                    for (int c = 0; c < (50 < nchroma ? 3: 1); c++) {
                        out(y, x, (50 < nchroma ? 50*3: nchroma*3+(50-nchroma))+c) = -1 * out.get_zero(y-4, x, (50 < nchroma ? 50*3: nchroma*3+(50-nchroma))+c) +
                                                      out(y, x, (49 < nchroma ? 49*3: nchroma*3+(49-nchroma))+c) +
                                                      -1 * out.get_zero(y-4, x, (49 < nchroma ? 49*3: nchroma*3+(49-nchroma))+c);
                    }
                }
                
                /* Kernel 52 */
                if (n > 51) {
                    for (int c = 0; c < (51 < nchroma ? 3: 1); c++) {
                        out(y, x, (51 < nchroma ? 51*3: nchroma*3+(51-nchroma))+c) = -1 * out.get_zero(y-2, x, (51 < nchroma ? 51*3: nchroma*3+(51-nchroma))+c) +
                                                      out(y, x, (50 < nchroma ? 50*3: nchroma*3+(50-nchroma))+c) +
                                                      -1 * out.get_zero(y-2, x, (50 < nchroma ? 50*3: nchroma*3+(50-nchroma))+c);
                    }
                }
                
                /* Kernel 53 */
                if (n > 52) {
                    for (int c = 0; c < (52 < nchroma ? 3: 1); c++) {
                        out(y, x, (52 < nchroma ? 52*3: nchroma*3+(52-nchroma))+c) = 1 * out.get_zero(y-4, x, (52 < nchroma ? 52*3: nchroma*3+(52-nchroma))+c) +
                                                      out(y, x, (51 < nchroma ? 51*3: nchroma*3+(51-nchroma))+c) +
                                                      1 * out.get_zero(y-4, x, (51 < nchroma ? 51*3: nchroma*3+(51-nchroma))+c);
                    }
                }
                
                /* Kernel 54 */
                if (n > 53) {
                    for (int c = 0; c < (53 < nchroma ? 3: 1); c++) {
                        out(y, x, (53 < nchroma ? 53*3: nchroma*3+(53-nchroma))+c) = -1 * out.get_zero(y-1, x, (53 < nchroma ? 53*3: nchroma*3+(53-nchroma))+c) +
                                                      out(y, x, (52 < nchroma ? 52*3: nchroma*3+(52-nchroma))+c) +
                                                      -1 * out.get_zero(y-1, x, (52 < nchroma ? 52*3: nchroma*3+(52-nchroma))+c);
                    }
                }
                
                /* Kernel 55 */
                if (n > 54) {
                    for (int c = 0; c < (54 < nchroma ? 3: 1); c++) {
                        out(y, x, (54 < nchroma ? 54*3: nchroma*3+(54-nchroma))+c) = -1 * out.get_zero(y-4, x, (54 < nchroma ? 54*3: nchroma*3+(54-nchroma))+c) +
                                                      out(y, x, (53 < nchroma ? 53*3: nchroma*3+(53-nchroma))+c) +
                                                      -1 * out.get_zero(y-4, x, (53 < nchroma ? 53*3: nchroma*3+(53-nchroma))+c);
                    }
                }
                
                /* Kernel 56 */
                if (n > 55) {
                    for (int c = 0; c < (55 < nchroma ? 3: 1); c++) {
                        out(y, x, (55 < nchroma ? 55*3: nchroma*3+(55-nchroma))+c) = 1 * out.get_zero(y-2, x, (55 < nchroma ? 55*3: nchroma*3+(55-nchroma))+c) +
                                                      out(y, x, (54 < nchroma ? 54*3: nchroma*3+(54-nchroma))+c) +
                                                      1 * out.get_zero(y-2, x, (54 < nchroma ? 54*3: nchroma*3+(54-nchroma))+c);
                    }
                }
                
                /* Kernel 57 */
                if (n > 56) {
                    for (int c = 0; c < (56 < nchroma ? 3: 1); c++) {
                        out(y, x, (56 < nchroma ? 56*3: nchroma*3+(56-nchroma))+c) = 1 * out.get_zero(y-4, x, (56 < nchroma ? 56*3: nchroma*3+(56-nchroma))+c) +
                                                      out(y, x, (55 < nchroma ? 55*3: nchroma*3+(55-nchroma))+c) +
                                                      1 * out.get_zero(y-4, x, (55 < nchroma ? 55*3: nchroma*3+(55-nchroma))+c);
                    }
                }
                
                /* Kernel 58 */
                if (n > 57) {
                    for (int c = 0; c < (57 < nchroma ? 3: 1); c++) {
                        out(y, x, (57 < nchroma ? 57*3: nchroma*3+(57-nchroma))+c) = -1 * out.get_zero(y, x-4, (57 < nchroma ? 57*3: nchroma*3+(57-nchroma))+c) +
                                                      out(y, x, (56 < nchroma ? 56*3: nchroma*3+(56-nchroma))+c) +
                                                      -1 * out.get_zero(y, x-4, (56 < nchroma ? 56*3: nchroma*3+(56-nchroma))+c);
                    }
                }
                
                /* Kernel 59 */
                if (n > 58) {
                    for (int c = 0; c < (58 < nchroma ? 3: 1); c++) {
                        out(y, x, (58 < nchroma ? 58*3: nchroma*3+(58-nchroma))+c) = -1 * out.get_zero(y, x-2, (58 < nchroma ? 58*3: nchroma*3+(58-nchroma))+c) +
                                                      out(y, x, (57 < nchroma ? 57*3: nchroma*3+(57-nchroma))+c) +
                                                      -1 * out.get_zero(y, x-2, (57 < nchroma ? 57*3: nchroma*3+(57-nchroma))+c);
                    }
                }
                
                /* Kernel 60 */
                if (n > 59) {
                    for (int c = 0; c < (59 < nchroma ? 3: 1); c++) {
                        out(y, x, (59 < nchroma ? 59*3: nchroma*3+(59-nchroma))+c) = 1 * out.get_zero(y, x-4, (59 < nchroma ? 59*3: nchroma*3+(59-nchroma))+c) +
                                                      out(y, x, (58 < nchroma ? 58*3: nchroma*3+(58-nchroma))+c) +
                                                      1 * out.get_zero(y, x-4, (58 < nchroma ? 58*3: nchroma*3+(58-nchroma))+c);
                    }
                }
                
                /* Kernel 61 */
                if (n > 60) {
                    for (int c = 0; c < (60 < nchroma ? 3: 1); c++) {
                        out(y, x, (60 < nchroma ? 60*3: nchroma*3+(60-nchroma))+c) = 1 * out.get_zero(y, x-1, (60 < nchroma ? 60*3: nchroma*3+(60-nchroma))+c) +
                                                      out(y, x, (59 < nchroma ? 59*3: nchroma*3+(59-nchroma))+c) +
                                                      1 * out.get_zero(y, x-1, (59 < nchroma ? 59*3: nchroma*3+(59-nchroma))+c);
                    }
                }
                
                /* Kernel 62 */
                if (n > 61) {
                    for (int c = 0; c < (61 < nchroma ? 3: 1); c++) {
                        out(y, x, (61 < nchroma ? 61*3: nchroma*3+(61-nchroma))+c) = -1 * out.get_zero(y, x-4, (61 < nchroma ? 61*3: nchroma*3+(61-nchroma))+c) +
                                                      out(y, x, (60 < nchroma ? 60*3: nchroma*3+(60-nchroma))+c) +
                                                      -1 * out.get_zero(y, x-4, (60 < nchroma ? 60*3: nchroma*3+(60-nchroma))+c);
                    }
                }
                
                /* Kernel 63 */
                if (n > 62) {
                    for (int c = 0; c < (62 < nchroma ? 3: 1); c++) {
                        out(y, x, (62 < nchroma ? 62*3: nchroma*3+(62-nchroma))+c) = 1 * out.get_zero(y, x-2, (62 < nchroma ? 62*3: nchroma*3+(62-nchroma))+c) +
                                                      out(y, x, (61 < nchroma ? 61*3: nchroma*3+(61-nchroma))+c) +
                                                      1 * out.get_zero(y, x-2, (61 < nchroma ? 61*3: nchroma*3+(61-nchroma))+c);
                    }
                }
                
                /* Kernel 64 */
                if (n > 63) {
                    for (int c = 0; c < (63 < nchroma ? 3: 1); c++) {
                        out(y, x, (63 < nchroma ? 63*3: nchroma*3+(63-nchroma))+c) = 1 * out.get_zero(y, x-4, (63 < nchroma ? 63*3: nchroma*3+(63-nchroma))+c) +
                                                      out(y, x, (62 < nchroma ? 62*3: nchroma*3+(62-nchroma))+c) +
                                                      1 * out.get_zero(y, x-4, (62 < nchroma ? 62*3: nchroma*3+(62-nchroma))+c);
                    }
                }
                
        }
    }
#if TABLE_EXTRA_VERBOSE
    printf("gck y second part\n"); fflush(stdout);
#endif
    for (int y = 4; y < out.height(); y++) {
        for (int x = 0; x < 4; x++) {
            
                /* Kernel 2 */
                if (n > 1) {
                    for (int c = 0; c < (1 < nchroma ? 3: 1); c++) {
                        out(y, x, (1 < nchroma ? 1*3: nchroma*3+(1-nchroma))+c) = -1 * out.get_zero(y, x-4, (1 < nchroma ? 1*3: nchroma*3+(1-nchroma))+c) +
                                                      out(y, x, (0 < nchroma ? 0*3: nchroma*3+(0-nchroma))+c) +
                                                      -1 * out.get_zero(y, x-4, (0 < nchroma ? 0*3: nchroma*3+(0-nchroma))+c);
                    }
                }
                
                /* Kernel 3 */
                if (n > 2) {
                    for (int c = 0; c < (2 < nchroma ? 3: 1); c++) {
                        out(y, x, (2 < nchroma ? 2*3: nchroma*3+(2-nchroma))+c) = -1 * out.get_zero(y-4, x, (2 < nchroma ? 2*3: nchroma*3+(2-nchroma))+c) +
                                                      out(y, x, (1 < nchroma ? 1*3: nchroma*3+(1-nchroma))+c) +
                                                      -1 * out.get_zero(y-4, x, (1 < nchroma ? 1*3: nchroma*3+(1-nchroma))+c);
                    }
                }
                
                /* Kernel 4 */
                if (n > 3) {
                    for (int c = 0; c < (3 < nchroma ? 3: 1); c++) {
                        out(y, x, (3 < nchroma ? 3*3: nchroma*3+(3-nchroma))+c) = 1 * out.get_zero(y, x-4, (3 < nchroma ? 3*3: nchroma*3+(3-nchroma))+c) +
                                                      out(y, x, (2 < nchroma ? 2*3: nchroma*3+(2-nchroma))+c) +
                                                      1 * out.get_zero(y, x-4, (2 < nchroma ? 2*3: nchroma*3+(2-nchroma))+c);
                    }
                }
                
                /* Kernel 5 */
                if (n > 4) {
                    for (int c = 0; c < (4 < nchroma ? 3: 1); c++) {
                        out(y, x, (4 < nchroma ? 4*3: nchroma*3+(4-nchroma))+c) = -1 * out.get_zero(y-2, x, (4 < nchroma ? 4*3: nchroma*3+(4-nchroma))+c) +
                                                      out(y, x, (3 < nchroma ? 3*3: nchroma*3+(3-nchroma))+c) +
                                                      -1 * out.get_zero(y-2, x, (3 < nchroma ? 3*3: nchroma*3+(3-nchroma))+c);
                    }
                }
                
                /* Kernel 6 */
                if (n > 5) {
                    for (int c = 0; c < (5 < nchroma ? 3: 1); c++) {
                        out(y, x, (5 < nchroma ? 5*3: nchroma*3+(5-nchroma))+c) = -1 * out.get_zero(y, x-4, (5 < nchroma ? 5*3: nchroma*3+(5-nchroma))+c) +
                                                      out(y, x, (4 < nchroma ? 4*3: nchroma*3+(4-nchroma))+c) +
                                                      -1 * out.get_zero(y, x-4, (4 < nchroma ? 4*3: nchroma*3+(4-nchroma))+c);
                    }
                }
                
                /* Kernel 7 */
                if (n > 6) {
                    for (int c = 0; c < (6 < nchroma ? 3: 1); c++) {
                        out(y, x, (6 < nchroma ? 6*3: nchroma*3+(6-nchroma))+c) = -1 * out.get_zero(y, x-2, (6 < nchroma ? 6*3: nchroma*3+(6-nchroma))+c) +
                                                      out(y, x, (5 < nchroma ? 5*3: nchroma*3+(5-nchroma))+c) +
                                                      -1 * out.get_zero(y, x-2, (5 < nchroma ? 5*3: nchroma*3+(5-nchroma))+c);
                    }
                }
                
                /* Kernel 8 */
                if (n > 7) {
                    for (int c = 0; c < (7 < nchroma ? 3: 1); c++) {
                        out(y, x, (7 < nchroma ? 7*3: nchroma*3+(7-nchroma))+c) = 1 * out.get_zero(y-2, x, (7 < nchroma ? 7*3: nchroma*3+(7-nchroma))+c) +
                                                      out(y, x, (6 < nchroma ? 6*3: nchroma*3+(6-nchroma))+c) +
                                                      1 * out.get_zero(y-2, x, (6 < nchroma ? 6*3: nchroma*3+(6-nchroma))+c);
                    }
                }
                
                /* Kernel 9 */
                if (n > 8) {
                    for (int c = 0; c < (8 < nchroma ? 3: 1); c++) {
                        out(y, x, (8 < nchroma ? 8*3: nchroma*3+(8-nchroma))+c) = 1 * out.get_zero(y-4, x, (8 < nchroma ? 8*3: nchroma*3+(8-nchroma))+c) +
                                                      out(y, x, (7 < nchroma ? 7*3: nchroma*3+(7-nchroma))+c) +
                                                      1 * out.get_zero(y-4, x, (7 < nchroma ? 7*3: nchroma*3+(7-nchroma))+c);
                    }
                }
                
                /* Kernel 10 */
                if (n > 9) {
                    for (int c = 0; c < (9 < nchroma ? 3: 1); c++) {
                        out(y, x, (9 < nchroma ? 9*3: nchroma*3+(9-nchroma))+c) = 1 * out.get_zero(y, x-4, (9 < nchroma ? 9*3: nchroma*3+(9-nchroma))+c) +
                                                      out(y, x, (8 < nchroma ? 8*3: nchroma*3+(8-nchroma))+c) +
                                                      1 * out.get_zero(y, x-4, (8 < nchroma ? 8*3: nchroma*3+(8-nchroma))+c);
                    }
                }
                
                /* Kernel 11 */
                if (n > 10) {
                    for (int c = 0; c < (10 < nchroma ? 3: 1); c++) {
                        out(y, x, (10 < nchroma ? 10*3: nchroma*3+(10-nchroma))+c) = -1 * out.get_zero(y-4, x, (10 < nchroma ? 10*3: nchroma*3+(10-nchroma))+c) +
                                                      out(y, x, (9 < nchroma ? 9*3: nchroma*3+(9-nchroma))+c) +
                                                      -1 * out.get_zero(y-4, x, (9 < nchroma ? 9*3: nchroma*3+(9-nchroma))+c);
                    }
                }
                
                /* Kernel 12 */
                if (n > 11) {
                    for (int c = 0; c < (11 < nchroma ? 3: 1); c++) {
                        out(y, x, (11 < nchroma ? 11*3: nchroma*3+(11-nchroma))+c) = -1 * out.get_zero(y-2, x, (11 < nchroma ? 11*3: nchroma*3+(11-nchroma))+c) +
                                                      out(y, x, (10 < nchroma ? 10*3: nchroma*3+(10-nchroma))+c) +
                                                      -1 * out.get_zero(y-2, x, (10 < nchroma ? 10*3: nchroma*3+(10-nchroma))+c);
                    }
                }
                
                /* Kernel 13 */
                if (n > 12) {
                    for (int c = 0; c < (12 < nchroma ? 3: 1); c++) {
                        out(y, x, (12 < nchroma ? 12*3: nchroma*3+(12-nchroma))+c) = 1 * out.get_zero(y-4, x, (12 < nchroma ? 12*3: nchroma*3+(12-nchroma))+c) +
                                                      out(y, x, (11 < nchroma ? 11*3: nchroma*3+(11-nchroma))+c) +
                                                      1 * out.get_zero(y-4, x, (11 < nchroma ? 11*3: nchroma*3+(11-nchroma))+c);
                    }
                }
                
                /* Kernel 14 */
                if (n > 13) {
                    for (int c = 0; c < (13 < nchroma ? 3: 1); c++) {
                        out(y, x, (13 < nchroma ? 13*3: nchroma*3+(13-nchroma))+c) = -1 * out.get_zero(y, x-4, (13 < nchroma ? 13*3: nchroma*3+(13-nchroma))+c) +
                                                      out(y, x, (12 < nchroma ? 12*3: nchroma*3+(12-nchroma))+c) +
                                                      -1 * out.get_zero(y, x-4, (12 < nchroma ? 12*3: nchroma*3+(12-nchroma))+c);
                    }
                }
                
                /* Kernel 15 */
                if (n > 14) {
                    for (int c = 0; c < (14 < nchroma ? 3: 1); c++) {
                        out(y, x, (14 < nchroma ? 14*3: nchroma*3+(14-nchroma))+c) = 1 * out.get_zero(y, x-2, (14 < nchroma ? 14*3: nchroma*3+(14-nchroma))+c) +
                                                      out(y, x, (13 < nchroma ? 13*3: nchroma*3+(13-nchroma))+c) +
                                                      1 * out.get_zero(y, x-2, (13 < nchroma ? 13*3: nchroma*3+(13-nchroma))+c);
                    }
                }
                
                /* Kernel 16 */
                if (n > 15) {
                    for (int c = 0; c < (15 < nchroma ? 3: 1); c++) {
                        out(y, x, (15 < nchroma ? 15*3: nchroma*3+(15-nchroma))+c) = 1 * out.get_zero(y, x-4, (15 < nchroma ? 15*3: nchroma*3+(15-nchroma))+c) +
                                                      out(y, x, (14 < nchroma ? 14*3: nchroma*3+(14-nchroma))+c) +
                                                      1 * out.get_zero(y, x-4, (14 < nchroma ? 14*3: nchroma*3+(14-nchroma))+c);
                    }
                }
                
                /* Kernel 17 */
                if (n > 16) {
                    for (int c = 0; c < (16 < nchroma ? 3: 1); c++) {
                        out(y, x, (16 < nchroma ? 16*3: nchroma*3+(16-nchroma))+c) = -1 * out.get_zero(y-1, x, (16 < nchroma ? 16*3: nchroma*3+(16-nchroma))+c) +
                                                      out(y, x, (15 < nchroma ? 15*3: nchroma*3+(15-nchroma))+c) +
                                                      -1 * out.get_zero(y-1, x, (15 < nchroma ? 15*3: nchroma*3+(15-nchroma))+c);
                    }
                }
                
                /* Kernel 18 */
                if (n > 17) {
                    for (int c = 0; c < (17 < nchroma ? 3: 1); c++) {
                        out(y, x, (17 < nchroma ? 17*3: nchroma*3+(17-nchroma))+c) = -1 * out.get_zero(y, x-4, (17 < nchroma ? 17*3: nchroma*3+(17-nchroma))+c) +
                                                      out(y, x, (16 < nchroma ? 16*3: nchroma*3+(16-nchroma))+c) +
                                                      -1 * out.get_zero(y, x-4, (16 < nchroma ? 16*3: nchroma*3+(16-nchroma))+c);
                    }
                }
                
                /* Kernel 19 */
                if (n > 18) {
                    for (int c = 0; c < (18 < nchroma ? 3: 1); c++) {
                        out(y, x, (18 < nchroma ? 18*3: nchroma*3+(18-nchroma))+c) = -1 * out.get_zero(y, x-2, (18 < nchroma ? 18*3: nchroma*3+(18-nchroma))+c) +
                                                      out(y, x, (17 < nchroma ? 17*3: nchroma*3+(17-nchroma))+c) +
                                                      -1 * out.get_zero(y, x-2, (17 < nchroma ? 17*3: nchroma*3+(17-nchroma))+c);
                    }
                }
                
                /* Kernel 20 */
                if (n > 19) {
                    for (int c = 0; c < (19 < nchroma ? 3: 1); c++) {
                        out(y, x, (19 < nchroma ? 19*3: nchroma*3+(19-nchroma))+c) = 1 * out.get_zero(y, x-4, (19 < nchroma ? 19*3: nchroma*3+(19-nchroma))+c) +
                                                      out(y, x, (18 < nchroma ? 18*3: nchroma*3+(18-nchroma))+c) +
                                                      1 * out.get_zero(y, x-4, (18 < nchroma ? 18*3: nchroma*3+(18-nchroma))+c);
                    }
                }
                
                /* Kernel 21 */
                if (n > 20) {
                    for (int c = 0; c < (20 < nchroma ? 3: 1); c++) {
                        out(y, x, (20 < nchroma ? 20*3: nchroma*3+(20-nchroma))+c) = -1 * out.get_zero(y, x-1, (20 < nchroma ? 20*3: nchroma*3+(20-nchroma))+c) +
                                                      out(y, x, (19 < nchroma ? 19*3: nchroma*3+(19-nchroma))+c) +
                                                      -1 * out.get_zero(y, x-1, (19 < nchroma ? 19*3: nchroma*3+(19-nchroma))+c);
                    }
                }
                
                /* Kernel 22 */
                if (n > 21) {
                    for (int c = 0; c < (21 < nchroma ? 3: 1); c++) {
                        out(y, x, (21 < nchroma ? 21*3: nchroma*3+(21-nchroma))+c) = 1 * out.get_zero(y-1, x, (21 < nchroma ? 21*3: nchroma*3+(21-nchroma))+c) +
                                                      out(y, x, (20 < nchroma ? 20*3: nchroma*3+(20-nchroma))+c) +
                                                      1 * out.get_zero(y-1, x, (20 < nchroma ? 20*3: nchroma*3+(20-nchroma))+c);
                    }
                }
                
                /* Kernel 23 */
                if (n > 22) {
                    for (int c = 0; c < (22 < nchroma ? 3: 1); c++) {
                        out(y, x, (22 < nchroma ? 22*3: nchroma*3+(22-nchroma))+c) = -1 * out.get_zero(y-4, x, (22 < nchroma ? 22*3: nchroma*3+(22-nchroma))+c) +
                                                      out(y, x, (21 < nchroma ? 21*3: nchroma*3+(21-nchroma))+c) +
                                                      -1 * out.get_zero(y-4, x, (21 < nchroma ? 21*3: nchroma*3+(21-nchroma))+c);
                    }
                }
                
                /* Kernel 24 */
                if (n > 23) {
                    for (int c = 0; c < (23 < nchroma ? 3: 1); c++) {
                        out(y, x, (23 < nchroma ? 23*3: nchroma*3+(23-nchroma))+c) = 1 * out.get_zero(y-2, x, (23 < nchroma ? 23*3: nchroma*3+(23-nchroma))+c) +
                                                      out(y, x, (22 < nchroma ? 22*3: nchroma*3+(22-nchroma))+c) +
                                                      1 * out.get_zero(y-2, x, (22 < nchroma ? 22*3: nchroma*3+(22-nchroma))+c);
                    }
                }
                
                /* Kernel 25 */
                if (n > 24) {
                    for (int c = 0; c < (24 < nchroma ? 3: 1); c++) {
                        out(y, x, (24 < nchroma ? 24*3: nchroma*3+(24-nchroma))+c) = 1 * out.get_zero(y-4, x, (24 < nchroma ? 24*3: nchroma*3+(24-nchroma))+c) +
                                                      out(y, x, (23 < nchroma ? 23*3: nchroma*3+(23-nchroma))+c) +
                                                      1 * out.get_zero(y-4, x, (23 < nchroma ? 23*3: nchroma*3+(23-nchroma))+c);
                    }
                }
                
                /* Kernel 26 */
                if (n > 25) {
                    for (int c = 0; c < (25 < nchroma ? 3: 1); c++) {
                        out(y, x, (25 < nchroma ? 25*3: nchroma*3+(25-nchroma))+c) = -1 * out.get_zero(y, x-4, (25 < nchroma ? 25*3: nchroma*3+(25-nchroma))+c) +
                                                      out(y, x, (24 < nchroma ? 24*3: nchroma*3+(24-nchroma))+c) +
                                                      -1 * out.get_zero(y, x-4, (24 < nchroma ? 24*3: nchroma*3+(24-nchroma))+c);
                    }
                }
                
                /* Kernel 27 */
                if (n > 26) {
                    for (int c = 0; c < (26 < nchroma ? 3: 1); c++) {
                        out(y, x, (26 < nchroma ? 26*3: nchroma*3+(26-nchroma))+c) = -1 * out.get_zero(y-4, x, (26 < nchroma ? 26*3: nchroma*3+(26-nchroma))+c) +
                                                      out(y, x, (25 < nchroma ? 25*3: nchroma*3+(25-nchroma))+c) +
                                                      -1 * out.get_zero(y-4, x, (25 < nchroma ? 25*3: nchroma*3+(25-nchroma))+c);
                    }
                }
                
                /* Kernel 28 */
                if (n > 27) {
                    for (int c = 0; c < (27 < nchroma ? 3: 1); c++) {
                        out(y, x, (27 < nchroma ? 27*3: nchroma*3+(27-nchroma))+c) = -1 * out.get_zero(y-2, x, (27 < nchroma ? 27*3: nchroma*3+(27-nchroma))+c) +
                                                      out(y, x, (26 < nchroma ? 26*3: nchroma*3+(26-nchroma))+c) +
                                                      -1 * out.get_zero(y-2, x, (26 < nchroma ? 26*3: nchroma*3+(26-nchroma))+c);
                    }
                }
                
                /* Kernel 29 */
                if (n > 28) {
                    for (int c = 0; c < (28 < nchroma ? 3: 1); c++) {
                        out(y, x, (28 < nchroma ? 28*3: nchroma*3+(28-nchroma))+c) = 1 * out.get_zero(y-4, x, (28 < nchroma ? 28*3: nchroma*3+(28-nchroma))+c) +
                                                      out(y, x, (27 < nchroma ? 27*3: nchroma*3+(27-nchroma))+c) +
                                                      1 * out.get_zero(y-4, x, (27 < nchroma ? 27*3: nchroma*3+(27-nchroma))+c);
                    }
                }
                
                /* Kernel 30 */
                if (n > 29) {
                    for (int c = 0; c < (29 < nchroma ? 3: 1); c++) {
                        out(y, x, (29 < nchroma ? 29*3: nchroma*3+(29-nchroma))+c) = -1 * out.get_zero(y-1, x, (29 < nchroma ? 29*3: nchroma*3+(29-nchroma))+c) +
                                                      out(y, x, (28 < nchroma ? 28*3: nchroma*3+(28-nchroma))+c) +
                                                      -1 * out.get_zero(y-1, x, (28 < nchroma ? 28*3: nchroma*3+(28-nchroma))+c);
                    }
                }
                
                /* Kernel 31 */
                if (n > 30) {
                    for (int c = 0; c < (30 < nchroma ? 3: 1); c++) {
                        out(y, x, (30 < nchroma ? 30*3: nchroma*3+(30-nchroma))+c) = -1 * out.get_zero(y-4, x, (30 < nchroma ? 30*3: nchroma*3+(30-nchroma))+c) +
                                                      out(y, x, (29 < nchroma ? 29*3: nchroma*3+(29-nchroma))+c) +
                                                      -1 * out.get_zero(y-4, x, (29 < nchroma ? 29*3: nchroma*3+(29-nchroma))+c);
                    }
                }
                
                /* Kernel 32 */
                if (n > 31) {
                    for (int c = 0; c < (31 < nchroma ? 3: 1); c++) {
                        out(y, x, (31 < nchroma ? 31*3: nchroma*3+(31-nchroma))+c) = 1 * out.get_zero(y, x-4, (31 < nchroma ? 31*3: nchroma*3+(31-nchroma))+c) +
                                                      out(y, x, (30 < nchroma ? 30*3: nchroma*3+(30-nchroma))+c) +
                                                      1 * out.get_zero(y, x-4, (30 < nchroma ? 30*3: nchroma*3+(30-nchroma))+c);
                    }
                }
                
                /* Kernel 33 */
                if (n > 32) {
                    for (int c = 0; c < (32 < nchroma ? 3: 1); c++) {
                        out(y, x, (32 < nchroma ? 32*3: nchroma*3+(32-nchroma))+c) = 1 * out.get_zero(y, x-1, (32 < nchroma ? 32*3: nchroma*3+(32-nchroma))+c) +
                                                      out(y, x, (31 < nchroma ? 31*3: nchroma*3+(31-nchroma))+c) +
                                                      1 * out.get_zero(y, x-1, (31 < nchroma ? 31*3: nchroma*3+(31-nchroma))+c);
                    }
                }
                
                /* Kernel 34 */
                if (n > 33) {
                    for (int c = 0; c < (33 < nchroma ? 3: 1); c++) {
                        out(y, x, (33 < nchroma ? 33*3: nchroma*3+(33-nchroma))+c) = -1 * out.get_zero(y, x-4, (33 < nchroma ? 33*3: nchroma*3+(33-nchroma))+c) +
                                                      out(y, x, (32 < nchroma ? 32*3: nchroma*3+(32-nchroma))+c) +
                                                      -1 * out.get_zero(y, x-4, (32 < nchroma ? 32*3: nchroma*3+(32-nchroma))+c);
                    }
                }
                
                /* Kernel 35 */
                if (n > 34) {
                    for (int c = 0; c < (34 < nchroma ? 3: 1); c++) {
                        out(y, x, (34 < nchroma ? 34*3: nchroma*3+(34-nchroma))+c) = 1 * out.get_zero(y, x-2, (34 < nchroma ? 34*3: nchroma*3+(34-nchroma))+c) +
                                                      out(y, x, (33 < nchroma ? 33*3: nchroma*3+(33-nchroma))+c) +
                                                      1 * out.get_zero(y, x-2, (33 < nchroma ? 33*3: nchroma*3+(33-nchroma))+c);
                    }
                }
                
                /* Kernel 36 */
                if (n > 35) {
                    for (int c = 0; c < (35 < nchroma ? 3: 1); c++) {
                        out(y, x, (35 < nchroma ? 35*3: nchroma*3+(35-nchroma))+c) = 1 * out.get_zero(y, x-4, (35 < nchroma ? 35*3: nchroma*3+(35-nchroma))+c) +
                                                      out(y, x, (34 < nchroma ? 34*3: nchroma*3+(34-nchroma))+c) +
                                                      1 * out.get_zero(y, x-4, (34 < nchroma ? 34*3: nchroma*3+(34-nchroma))+c);
                    }
                }
                
                /* Kernel 37 */
                if (n > 36) {
                    for (int c = 0; c < (36 < nchroma ? 3: 1); c++) {
                        out(y, x, (36 < nchroma ? 36*3: nchroma*3+(36-nchroma))+c) = 1 * out.get_zero(y-2, x, (36 < nchroma ? 36*3: nchroma*3+(36-nchroma))+c) +
                                                      out(y, x, (35 < nchroma ? 35*3: nchroma*3+(35-nchroma))+c) +
                                                      1 * out.get_zero(y-2, x, (35 < nchroma ? 35*3: nchroma*3+(35-nchroma))+c);
                    }
                }
                
                /* Kernel 38 */
                if (n > 37) {
                    for (int c = 0; c < (37 < nchroma ? 3: 1); c++) {
                        out(y, x, (37 < nchroma ? 37*3: nchroma*3+(37-nchroma))+c) = -1 * out.get_zero(y, x-4, (37 < nchroma ? 37*3: nchroma*3+(37-nchroma))+c) +
                                                      out(y, x, (36 < nchroma ? 36*3: nchroma*3+(36-nchroma))+c) +
                                                      -1 * out.get_zero(y, x-4, (36 < nchroma ? 36*3: nchroma*3+(36-nchroma))+c);
                    }
                }
                
                /* Kernel 39 */
                if (n > 38) {
                    for (int c = 0; c < (38 < nchroma ? 3: 1); c++) {
                        out(y, x, (38 < nchroma ? 38*3: nchroma*3+(38-nchroma))+c) = -1 * out.get_zero(y, x-2, (38 < nchroma ? 38*3: nchroma*3+(38-nchroma))+c) +
                                                      out(y, x, (37 < nchroma ? 37*3: nchroma*3+(37-nchroma))+c) +
                                                      -1 * out.get_zero(y, x-2, (37 < nchroma ? 37*3: nchroma*3+(37-nchroma))+c);
                    }
                }
                
                /* Kernel 40 */
                if (n > 39) {
                    for (int c = 0; c < (39 < nchroma ? 3: 1); c++) {
                        out(y, x, (39 < nchroma ? 39*3: nchroma*3+(39-nchroma))+c) = 1 * out.get_zero(y, x-4, (39 < nchroma ? 39*3: nchroma*3+(39-nchroma))+c) +
                                                      out(y, x, (38 < nchroma ? 38*3: nchroma*3+(38-nchroma))+c) +
                                                      1 * out.get_zero(y, x-4, (38 < nchroma ? 38*3: nchroma*3+(38-nchroma))+c);
                    }
                }
                
                /* Kernel 41 */
                if (n > 40) {
                    for (int c = 0; c < (40 < nchroma ? 3: 1); c++) {
                        out(y, x, (40 < nchroma ? 40*3: nchroma*3+(40-nchroma))+c) = -1 * out.get_zero(y, x-1, (40 < nchroma ? 40*3: nchroma*3+(40-nchroma))+c) +
                                                      out(y, x, (39 < nchroma ? 39*3: nchroma*3+(39-nchroma))+c) +
                                                      -1 * out.get_zero(y, x-1, (39 < nchroma ? 39*3: nchroma*3+(39-nchroma))+c);
                    }
                }
                
                /* Kernel 42 */
                if (n > 41) {
                    for (int c = 0; c < (41 < nchroma ? 3: 1); c++) {
                        out(y, x, (41 < nchroma ? 41*3: nchroma*3+(41-nchroma))+c) = -1 * out.get_zero(y, x-4, (41 < nchroma ? 41*3: nchroma*3+(41-nchroma))+c) +
                                                      out(y, x, (40 < nchroma ? 40*3: nchroma*3+(40-nchroma))+c) +
                                                      -1 * out.get_zero(y, x-4, (40 < nchroma ? 40*3: nchroma*3+(40-nchroma))+c);
                    }
                }
                
                /* Kernel 43 */
                if (n > 42) {
                    for (int c = 0; c < (42 < nchroma ? 3: 1); c++) {
                        out(y, x, (42 < nchroma ? 42*3: nchroma*3+(42-nchroma))+c) = 1 * out.get_zero(y, x-2, (42 < nchroma ? 42*3: nchroma*3+(42-nchroma))+c) +
                                                      out(y, x, (41 < nchroma ? 41*3: nchroma*3+(41-nchroma))+c) +
                                                      1 * out.get_zero(y, x-2, (41 < nchroma ? 41*3: nchroma*3+(41-nchroma))+c);
                    }
                }
                
                /* Kernel 44 */
                if (n > 43) {
                    for (int c = 0; c < (43 < nchroma ? 3: 1); c++) {
                        out(y, x, (43 < nchroma ? 43*3: nchroma*3+(43-nchroma))+c) = -1 * out.get_zero(y-2, x, (43 < nchroma ? 43*3: nchroma*3+(43-nchroma))+c) +
                                                      out(y, x, (42 < nchroma ? 42*3: nchroma*3+(42-nchroma))+c) +
                                                      -1 * out.get_zero(y-2, x, (42 < nchroma ? 42*3: nchroma*3+(42-nchroma))+c);
                    }
                }
                
                /* Kernel 45 */
                if (n > 44) {
                    for (int c = 0; c < (44 < nchroma ? 3: 1); c++) {
                        out(y, x, (44 < nchroma ? 44*3: nchroma*3+(44-nchroma))+c) = 1 * out.get_zero(y-4, x, (44 < nchroma ? 44*3: nchroma*3+(44-nchroma))+c) +
                                                      out(y, x, (43 < nchroma ? 43*3: nchroma*3+(43-nchroma))+c) +
                                                      1 * out.get_zero(y-4, x, (43 < nchroma ? 43*3: nchroma*3+(43-nchroma))+c);
                    }
                }
                
                /* Kernel 46 */
                if (n > 45) {
                    for (int c = 0; c < (45 < nchroma ? 3: 1); c++) {
                        out(y, x, (45 < nchroma ? 45*3: nchroma*3+(45-nchroma))+c) = 1 * out.get_zero(y-1, x, (45 < nchroma ? 45*3: nchroma*3+(45-nchroma))+c) +
                                                      out(y, x, (44 < nchroma ? 44*3: nchroma*3+(44-nchroma))+c) +
                                                      1 * out.get_zero(y-1, x, (44 < nchroma ? 44*3: nchroma*3+(44-nchroma))+c);
                    }
                }
                
                /* Kernel 47 */
                if (n > 46) {
                    for (int c = 0; c < (46 < nchroma ? 3: 1); c++) {
                        out(y, x, (46 < nchroma ? 46*3: nchroma*3+(46-nchroma))+c) = -1 * out.get_zero(y-4, x, (46 < nchroma ? 46*3: nchroma*3+(46-nchroma))+c) +
                                                      out(y, x, (45 < nchroma ? 45*3: nchroma*3+(45-nchroma))+c) +
                                                      -1 * out.get_zero(y-4, x, (45 < nchroma ? 45*3: nchroma*3+(45-nchroma))+c);
                    }
                }
                
                /* Kernel 48 */
                if (n > 47) {
                    for (int c = 0; c < (47 < nchroma ? 3: 1); c++) {
                        out(y, x, (47 < nchroma ? 47*3: nchroma*3+(47-nchroma))+c) = 1 * out.get_zero(y-2, x, (47 < nchroma ? 47*3: nchroma*3+(47-nchroma))+c) +
                                                      out(y, x, (46 < nchroma ? 46*3: nchroma*3+(46-nchroma))+c) +
                                                      1 * out.get_zero(y-2, x, (46 < nchroma ? 46*3: nchroma*3+(46-nchroma))+c);
                    }
                }
                
                /* Kernel 49 */
                if (n > 48) {
                    for (int c = 0; c < (48 < nchroma ? 3: 1); c++) {
                        out(y, x, (48 < nchroma ? 48*3: nchroma*3+(48-nchroma))+c) = 1 * out.get_zero(y-4, x, (48 < nchroma ? 48*3: nchroma*3+(48-nchroma))+c) +
                                                      out(y, x, (47 < nchroma ? 47*3: nchroma*3+(47-nchroma))+c) +
                                                      1 * out.get_zero(y-4, x, (47 < nchroma ? 47*3: nchroma*3+(47-nchroma))+c);
                    }
                }
                
                /* Kernel 50 */
                if (n > 49) {
                    for (int c = 0; c < (49 < nchroma ? 3: 1); c++) {
                        out(y, x, (49 < nchroma ? 49*3: nchroma*3+(49-nchroma))+c) = 1 * out.get_zero(y, x-4, (49 < nchroma ? 49*3: nchroma*3+(49-nchroma))+c) +
                                                      out(y, x, (48 < nchroma ? 48*3: nchroma*3+(48-nchroma))+c) +
                                                      1 * out.get_zero(y, x-4, (48 < nchroma ? 48*3: nchroma*3+(48-nchroma))+c);
                    }
                }
                
                /* Kernel 51 */
                if (n > 50) {
                    for (int c = 0; c < (50 < nchroma ? 3: 1); c++) {
                        out(y, x, (50 < nchroma ? 50*3: nchroma*3+(50-nchroma))+c) = -1 * out.get_zero(y-4, x, (50 < nchroma ? 50*3: nchroma*3+(50-nchroma))+c) +
                                                      out(y, x, (49 < nchroma ? 49*3: nchroma*3+(49-nchroma))+c) +
                                                      -1 * out.get_zero(y-4, x, (49 < nchroma ? 49*3: nchroma*3+(49-nchroma))+c);
                    }
                }
                
                /* Kernel 52 */
                if (n > 51) {
                    for (int c = 0; c < (51 < nchroma ? 3: 1); c++) {
                        out(y, x, (51 < nchroma ? 51*3: nchroma*3+(51-nchroma))+c) = -1 * out.get_zero(y-2, x, (51 < nchroma ? 51*3: nchroma*3+(51-nchroma))+c) +
                                                      out(y, x, (50 < nchroma ? 50*3: nchroma*3+(50-nchroma))+c) +
                                                      -1 * out.get_zero(y-2, x, (50 < nchroma ? 50*3: nchroma*3+(50-nchroma))+c);
                    }
                }
                
                /* Kernel 53 */
                if (n > 52) {
                    for (int c = 0; c < (52 < nchroma ? 3: 1); c++) {
                        out(y, x, (52 < nchroma ? 52*3: nchroma*3+(52-nchroma))+c) = 1 * out.get_zero(y-4, x, (52 < nchroma ? 52*3: nchroma*3+(52-nchroma))+c) +
                                                      out(y, x, (51 < nchroma ? 51*3: nchroma*3+(51-nchroma))+c) +
                                                      1 * out.get_zero(y-4, x, (51 < nchroma ? 51*3: nchroma*3+(51-nchroma))+c);
                    }
                }
                
                /* Kernel 54 */
                if (n > 53) {
                    for (int c = 0; c < (53 < nchroma ? 3: 1); c++) {
                        out(y, x, (53 < nchroma ? 53*3: nchroma*3+(53-nchroma))+c) = -1 * out.get_zero(y-1, x, (53 < nchroma ? 53*3: nchroma*3+(53-nchroma))+c) +
                                                      out(y, x, (52 < nchroma ? 52*3: nchroma*3+(52-nchroma))+c) +
                                                      -1 * out.get_zero(y-1, x, (52 < nchroma ? 52*3: nchroma*3+(52-nchroma))+c);
                    }
                }
                
                /* Kernel 55 */
                if (n > 54) {
                    for (int c = 0; c < (54 < nchroma ? 3: 1); c++) {
                        out(y, x, (54 < nchroma ? 54*3: nchroma*3+(54-nchroma))+c) = -1 * out.get_zero(y-4, x, (54 < nchroma ? 54*3: nchroma*3+(54-nchroma))+c) +
                                                      out(y, x, (53 < nchroma ? 53*3: nchroma*3+(53-nchroma))+c) +
                                                      -1 * out.get_zero(y-4, x, (53 < nchroma ? 53*3: nchroma*3+(53-nchroma))+c);
                    }
                }
                
                /* Kernel 56 */
                if (n > 55) {
                    for (int c = 0; c < (55 < nchroma ? 3: 1); c++) {
                        out(y, x, (55 < nchroma ? 55*3: nchroma*3+(55-nchroma))+c) = 1 * out.get_zero(y-2, x, (55 < nchroma ? 55*3: nchroma*3+(55-nchroma))+c) +
                                                      out(y, x, (54 < nchroma ? 54*3: nchroma*3+(54-nchroma))+c) +
                                                      1 * out.get_zero(y-2, x, (54 < nchroma ? 54*3: nchroma*3+(54-nchroma))+c);
                    }
                }
                
                /* Kernel 57 */
                if (n > 56) {
                    for (int c = 0; c < (56 < nchroma ? 3: 1); c++) {
                        out(y, x, (56 < nchroma ? 56*3: nchroma*3+(56-nchroma))+c) = 1 * out.get_zero(y-4, x, (56 < nchroma ? 56*3: nchroma*3+(56-nchroma))+c) +
                                                      out(y, x, (55 < nchroma ? 55*3: nchroma*3+(55-nchroma))+c) +
                                                      1 * out.get_zero(y-4, x, (55 < nchroma ? 55*3: nchroma*3+(55-nchroma))+c);
                    }
                }
                
                /* Kernel 58 */
                if (n > 57) {
                    for (int c = 0; c < (57 < nchroma ? 3: 1); c++) {
                        out(y, x, (57 < nchroma ? 57*3: nchroma*3+(57-nchroma))+c) = -1 * out.get_zero(y, x-4, (57 < nchroma ? 57*3: nchroma*3+(57-nchroma))+c) +
                                                      out(y, x, (56 < nchroma ? 56*3: nchroma*3+(56-nchroma))+c) +
                                                      -1 * out.get_zero(y, x-4, (56 < nchroma ? 56*3: nchroma*3+(56-nchroma))+c);
                    }
                }
                
                /* Kernel 59 */
                if (n > 58) {
                    for (int c = 0; c < (58 < nchroma ? 3: 1); c++) {
                        out(y, x, (58 < nchroma ? 58*3: nchroma*3+(58-nchroma))+c) = -1 * out.get_zero(y, x-2, (58 < nchroma ? 58*3: nchroma*3+(58-nchroma))+c) +
                                                      out(y, x, (57 < nchroma ? 57*3: nchroma*3+(57-nchroma))+c) +
                                                      -1 * out.get_zero(y, x-2, (57 < nchroma ? 57*3: nchroma*3+(57-nchroma))+c);
                    }
                }
                
                /* Kernel 60 */
                if (n > 59) {
                    for (int c = 0; c < (59 < nchroma ? 3: 1); c++) {
                        out(y, x, (59 < nchroma ? 59*3: nchroma*3+(59-nchroma))+c) = 1 * out.get_zero(y, x-4, (59 < nchroma ? 59*3: nchroma*3+(59-nchroma))+c) +
                                                      out(y, x, (58 < nchroma ? 58*3: nchroma*3+(58-nchroma))+c) +
                                                      1 * out.get_zero(y, x-4, (58 < nchroma ? 58*3: nchroma*3+(58-nchroma))+c);
                    }
                }
                
                /* Kernel 61 */
                if (n > 60) {
                    for (int c = 0; c < (60 < nchroma ? 3: 1); c++) {
                        out(y, x, (60 < nchroma ? 60*3: nchroma*3+(60-nchroma))+c) = 1 * out.get_zero(y, x-1, (60 < nchroma ? 60*3: nchroma*3+(60-nchroma))+c) +
                                                      out(y, x, (59 < nchroma ? 59*3: nchroma*3+(59-nchroma))+c) +
                                                      1 * out.get_zero(y, x-1, (59 < nchroma ? 59*3: nchroma*3+(59-nchroma))+c);
                    }
                }
                
                /* Kernel 62 */
                if (n > 61) {
                    for (int c = 0; c < (61 < nchroma ? 3: 1); c++) {
                        out(y, x, (61 < nchroma ? 61*3: nchroma*3+(61-nchroma))+c) = -1 * out.get_zero(y, x-4, (61 < nchroma ? 61*3: nchroma*3+(61-nchroma))+c) +
                                                      out(y, x, (60 < nchroma ? 60*3: nchroma*3+(60-nchroma))+c) +
                                                      -1 * out.get_zero(y, x-4, (60 < nchroma ? 60*3: nchroma*3+(60-nchroma))+c);
                    }
                }
                
                /* Kernel 63 */
                if (n > 62) {
                    for (int c = 0; c < (62 < nchroma ? 3: 1); c++) {
                        out(y, x, (62 < nchroma ? 62*3: nchroma*3+(62-nchroma))+c) = 1 * out.get_zero(y, x-2, (62 < nchroma ? 62*3: nchroma*3+(62-nchroma))+c) +
                                                      out(y, x, (61 < nchroma ? 61*3: nchroma*3+(61-nchroma))+c) +
                                                      1 * out.get_zero(y, x-2, (61 < nchroma ? 61*3: nchroma*3+(61-nchroma))+c);
                    }
                }
                
                /* Kernel 64 */
                if (n > 63) {
                    for (int c = 0; c < (63 < nchroma ? 3: 1); c++) {
                        out(y, x, (63 < nchroma ? 63*3: nchroma*3+(63-nchroma))+c) = 1 * out.get_zero(y, x-4, (63 < nchroma ? 63*3: nchroma*3+(63-nchroma))+c) +
                                                      out(y, x, (62 < nchroma ? 62*3: nchroma*3+(62-nchroma))+c) +
                                                      1 * out.get_zero(y, x-4, (62 < nchroma ? 62*3: nchroma*3+(62-nchroma))+c);
                    }
                }
                
        }
        for (int x = 4; x < out.width(); x++) {
            out_type *out_row = &out(y, x, 0);
            out_type *out_x4 = &out(y, x-4, 0);
out_type *out_x1 = &out(y, x-1, 0);
out_type *out_x2 = &out(y, x-2, 0);
out_type *out_y1 = &out(y-1, x, 0);
out_type *out_y2 = &out(y-2, x, 0);
out_type *out_y4 = &out(y-4, x, 0);
            
                /* Kernel 2 */
                if (n > 1) {
                    for (int c = 0; c < (1 < nchroma ? 3: 1); c++) {
                        out_row[(1 < nchroma ? 1*3: nchroma*3+(1-nchroma))+c] = -1 * out_x4[(1 < nchroma ? 1*3: nchroma*3+(1-nchroma))+c] +
                                                      out_row[(0 < nchroma ? 0*3: nchroma*3+(0-nchroma))+c] +
                                                      -1 * out_x4[(0 < nchroma ? 0*3: nchroma*3+(0-nchroma))+c];
                    }
                }
                
                /* Kernel 3 */
                if (n > 2) {
                    for (int c = 0; c < (2 < nchroma ? 3: 1); c++) {
                        out_row[(2 < nchroma ? 2*3: nchroma*3+(2-nchroma))+c] = -1 * out_y4[(2 < nchroma ? 2*3: nchroma*3+(2-nchroma))+c] +
                                                      out_row[(1 < nchroma ? 1*3: nchroma*3+(1-nchroma))+c] +
                                                      -1 * out_y4[(1 < nchroma ? 1*3: nchroma*3+(1-nchroma))+c];
                    }
                }
                
                /* Kernel 4 */
                if (n > 3) {
                    for (int c = 0; c < (3 < nchroma ? 3: 1); c++) {
                        out_row[(3 < nchroma ? 3*3: nchroma*3+(3-nchroma))+c] = 1 * out_x4[(3 < nchroma ? 3*3: nchroma*3+(3-nchroma))+c] +
                                                      out_row[(2 < nchroma ? 2*3: nchroma*3+(2-nchroma))+c] +
                                                      1 * out_x4[(2 < nchroma ? 2*3: nchroma*3+(2-nchroma))+c];
                    }
                }
                
                /* Kernel 5 */
                if (n > 4) {
                    for (int c = 0; c < (4 < nchroma ? 3: 1); c++) {
                        out_row[(4 < nchroma ? 4*3: nchroma*3+(4-nchroma))+c] = -1 * out_y2[(4 < nchroma ? 4*3: nchroma*3+(4-nchroma))+c] +
                                                      out_row[(3 < nchroma ? 3*3: nchroma*3+(3-nchroma))+c] +
                                                      -1 * out_y2[(3 < nchroma ? 3*3: nchroma*3+(3-nchroma))+c];
                    }
                }
                
                /* Kernel 6 */
                if (n > 5) {
                    for (int c = 0; c < (5 < nchroma ? 3: 1); c++) {
                        out_row[(5 < nchroma ? 5*3: nchroma*3+(5-nchroma))+c] = -1 * out_x4[(5 < nchroma ? 5*3: nchroma*3+(5-nchroma))+c] +
                                                      out_row[(4 < nchroma ? 4*3: nchroma*3+(4-nchroma))+c] +
                                                      -1 * out_x4[(4 < nchroma ? 4*3: nchroma*3+(4-nchroma))+c];
                    }
                }
                
                /* Kernel 7 */
                if (n > 6) {
                    for (int c = 0; c < (6 < nchroma ? 3: 1); c++) {
                        out_row[(6 < nchroma ? 6*3: nchroma*3+(6-nchroma))+c] = -1 * out_x2[(6 < nchroma ? 6*3: nchroma*3+(6-nchroma))+c] +
                                                      out_row[(5 < nchroma ? 5*3: nchroma*3+(5-nchroma))+c] +
                                                      -1 * out_x2[(5 < nchroma ? 5*3: nchroma*3+(5-nchroma))+c];
                    }
                }
                
                /* Kernel 8 */
                if (n > 7) {
                    for (int c = 0; c < (7 < nchroma ? 3: 1); c++) {
                        out_row[(7 < nchroma ? 7*3: nchroma*3+(7-nchroma))+c] = 1 * out_y2[(7 < nchroma ? 7*3: nchroma*3+(7-nchroma))+c] +
                                                      out_row[(6 < nchroma ? 6*3: nchroma*3+(6-nchroma))+c] +
                                                      1 * out_y2[(6 < nchroma ? 6*3: nchroma*3+(6-nchroma))+c];
                    }
                }
                
                /* Kernel 9 */
                if (n > 8) {
                    for (int c = 0; c < (8 < nchroma ? 3: 1); c++) {
                        out_row[(8 < nchroma ? 8*3: nchroma*3+(8-nchroma))+c] = 1 * out_y4[(8 < nchroma ? 8*3: nchroma*3+(8-nchroma))+c] +
                                                      out_row[(7 < nchroma ? 7*3: nchroma*3+(7-nchroma))+c] +
                                                      1 * out_y4[(7 < nchroma ? 7*3: nchroma*3+(7-nchroma))+c];
                    }
                }
                
                /* Kernel 10 */
                if (n > 9) {
                    for (int c = 0; c < (9 < nchroma ? 3: 1); c++) {
                        out_row[(9 < nchroma ? 9*3: nchroma*3+(9-nchroma))+c] = 1 * out_x4[(9 < nchroma ? 9*3: nchroma*3+(9-nchroma))+c] +
                                                      out_row[(8 < nchroma ? 8*3: nchroma*3+(8-nchroma))+c] +
                                                      1 * out_x4[(8 < nchroma ? 8*3: nchroma*3+(8-nchroma))+c];
                    }
                }
                
                /* Kernel 11 */
                if (n > 10) {
                    for (int c = 0; c < (10 < nchroma ? 3: 1); c++) {
                        out_row[(10 < nchroma ? 10*3: nchroma*3+(10-nchroma))+c] = -1 * out_y4[(10 < nchroma ? 10*3: nchroma*3+(10-nchroma))+c] +
                                                      out_row[(9 < nchroma ? 9*3: nchroma*3+(9-nchroma))+c] +
                                                      -1 * out_y4[(9 < nchroma ? 9*3: nchroma*3+(9-nchroma))+c];
                    }
                }
                
                /* Kernel 12 */
                if (n > 11) {
                    for (int c = 0; c < (11 < nchroma ? 3: 1); c++) {
                        out_row[(11 < nchroma ? 11*3: nchroma*3+(11-nchroma))+c] = -1 * out_y2[(11 < nchroma ? 11*3: nchroma*3+(11-nchroma))+c] +
                                                      out_row[(10 < nchroma ? 10*3: nchroma*3+(10-nchroma))+c] +
                                                      -1 * out_y2[(10 < nchroma ? 10*3: nchroma*3+(10-nchroma))+c];
                    }
                }
                
                /* Kernel 13 */
                if (n > 12) {
                    for (int c = 0; c < (12 < nchroma ? 3: 1); c++) {
                        out_row[(12 < nchroma ? 12*3: nchroma*3+(12-nchroma))+c] = 1 * out_y4[(12 < nchroma ? 12*3: nchroma*3+(12-nchroma))+c] +
                                                      out_row[(11 < nchroma ? 11*3: nchroma*3+(11-nchroma))+c] +
                                                      1 * out_y4[(11 < nchroma ? 11*3: nchroma*3+(11-nchroma))+c];
                    }
                }
                
                /* Kernel 14 */
                if (n > 13) {
                    for (int c = 0; c < (13 < nchroma ? 3: 1); c++) {
                        out_row[(13 < nchroma ? 13*3: nchroma*3+(13-nchroma))+c] = -1 * out_x4[(13 < nchroma ? 13*3: nchroma*3+(13-nchroma))+c] +
                                                      out_row[(12 < nchroma ? 12*3: nchroma*3+(12-nchroma))+c] +
                                                      -1 * out_x4[(12 < nchroma ? 12*3: nchroma*3+(12-nchroma))+c];
                    }
                }
                
                /* Kernel 15 */
                if (n > 14) {
                    for (int c = 0; c < (14 < nchroma ? 3: 1); c++) {
                        out_row[(14 < nchroma ? 14*3: nchroma*3+(14-nchroma))+c] = 1 * out_x2[(14 < nchroma ? 14*3: nchroma*3+(14-nchroma))+c] +
                                                      out_row[(13 < nchroma ? 13*3: nchroma*3+(13-nchroma))+c] +
                                                      1 * out_x2[(13 < nchroma ? 13*3: nchroma*3+(13-nchroma))+c];
                    }
                }
                
                /* Kernel 16 */
                if (n > 15) {
                    for (int c = 0; c < (15 < nchroma ? 3: 1); c++) {
                        out_row[(15 < nchroma ? 15*3: nchroma*3+(15-nchroma))+c] = 1 * out_x4[(15 < nchroma ? 15*3: nchroma*3+(15-nchroma))+c] +
                                                      out_row[(14 < nchroma ? 14*3: nchroma*3+(14-nchroma))+c] +
                                                      1 * out_x4[(14 < nchroma ? 14*3: nchroma*3+(14-nchroma))+c];
                    }
                }
                
                /* Kernel 17 */
                if (n > 16) {
                    for (int c = 0; c < (16 < nchroma ? 3: 1); c++) {
                        out_row[(16 < nchroma ? 16*3: nchroma*3+(16-nchroma))+c] = -1 * out_y1[(16 < nchroma ? 16*3: nchroma*3+(16-nchroma))+c] +
                                                      out_row[(15 < nchroma ? 15*3: nchroma*3+(15-nchroma))+c] +
                                                      -1 * out_y1[(15 < nchroma ? 15*3: nchroma*3+(15-nchroma))+c];
                    }
                }
                
                /* Kernel 18 */
                if (n > 17) {
                    for (int c = 0; c < (17 < nchroma ? 3: 1); c++) {
                        out_row[(17 < nchroma ? 17*3: nchroma*3+(17-nchroma))+c] = -1 * out_x4[(17 < nchroma ? 17*3: nchroma*3+(17-nchroma))+c] +
                                                      out_row[(16 < nchroma ? 16*3: nchroma*3+(16-nchroma))+c] +
                                                      -1 * out_x4[(16 < nchroma ? 16*3: nchroma*3+(16-nchroma))+c];
                    }
                }
                
                /* Kernel 19 */
                if (n > 18) {
                    for (int c = 0; c < (18 < nchroma ? 3: 1); c++) {
                        out_row[(18 < nchroma ? 18*3: nchroma*3+(18-nchroma))+c] = -1 * out_x2[(18 < nchroma ? 18*3: nchroma*3+(18-nchroma))+c] +
                                                      out_row[(17 < nchroma ? 17*3: nchroma*3+(17-nchroma))+c] +
                                                      -1 * out_x2[(17 < nchroma ? 17*3: nchroma*3+(17-nchroma))+c];
                    }
                }
                
                /* Kernel 20 */
                if (n > 19) {
                    for (int c = 0; c < (19 < nchroma ? 3: 1); c++) {
                        out_row[(19 < nchroma ? 19*3: nchroma*3+(19-nchroma))+c] = 1 * out_x4[(19 < nchroma ? 19*3: nchroma*3+(19-nchroma))+c] +
                                                      out_row[(18 < nchroma ? 18*3: nchroma*3+(18-nchroma))+c] +
                                                      1 * out_x4[(18 < nchroma ? 18*3: nchroma*3+(18-nchroma))+c];
                    }
                }
                
                /* Kernel 21 */
                if (n > 20) {
                    for (int c = 0; c < (20 < nchroma ? 3: 1); c++) {
                        out_row[(20 < nchroma ? 20*3: nchroma*3+(20-nchroma))+c] = -1 * out_x1[(20 < nchroma ? 20*3: nchroma*3+(20-nchroma))+c] +
                                                      out_row[(19 < nchroma ? 19*3: nchroma*3+(19-nchroma))+c] +
                                                      -1 * out_x1[(19 < nchroma ? 19*3: nchroma*3+(19-nchroma))+c];
                    }
                }
                
                /* Kernel 22 */
                if (n > 21) {
                    for (int c = 0; c < (21 < nchroma ? 3: 1); c++) {
                        out_row[(21 < nchroma ? 21*3: nchroma*3+(21-nchroma))+c] = 1 * out_y1[(21 < nchroma ? 21*3: nchroma*3+(21-nchroma))+c] +
                                                      out_row[(20 < nchroma ? 20*3: nchroma*3+(20-nchroma))+c] +
                                                      1 * out_y1[(20 < nchroma ? 20*3: nchroma*3+(20-nchroma))+c];
                    }
                }
                
                /* Kernel 23 */
                if (n > 22) {
                    for (int c = 0; c < (22 < nchroma ? 3: 1); c++) {
                        out_row[(22 < nchroma ? 22*3: nchroma*3+(22-nchroma))+c] = -1 * out_y4[(22 < nchroma ? 22*3: nchroma*3+(22-nchroma))+c] +
                                                      out_row[(21 < nchroma ? 21*3: nchroma*3+(21-nchroma))+c] +
                                                      -1 * out_y4[(21 < nchroma ? 21*3: nchroma*3+(21-nchroma))+c];
                    }
                }
                
                /* Kernel 24 */
                if (n > 23) {
                    for (int c = 0; c < (23 < nchroma ? 3: 1); c++) {
                        out_row[(23 < nchroma ? 23*3: nchroma*3+(23-nchroma))+c] = 1 * out_y2[(23 < nchroma ? 23*3: nchroma*3+(23-nchroma))+c] +
                                                      out_row[(22 < nchroma ? 22*3: nchroma*3+(22-nchroma))+c] +
                                                      1 * out_y2[(22 < nchroma ? 22*3: nchroma*3+(22-nchroma))+c];
                    }
                }
                
                /* Kernel 25 */
                if (n > 24) {
                    for (int c = 0; c < (24 < nchroma ? 3: 1); c++) {
                        out_row[(24 < nchroma ? 24*3: nchroma*3+(24-nchroma))+c] = 1 * out_y4[(24 < nchroma ? 24*3: nchroma*3+(24-nchroma))+c] +
                                                      out_row[(23 < nchroma ? 23*3: nchroma*3+(23-nchroma))+c] +
                                                      1 * out_y4[(23 < nchroma ? 23*3: nchroma*3+(23-nchroma))+c];
                    }
                }
                
                /* Kernel 26 */
                if (n > 25) {
                    for (int c = 0; c < (25 < nchroma ? 3: 1); c++) {
                        out_row[(25 < nchroma ? 25*3: nchroma*3+(25-nchroma))+c] = -1 * out_x4[(25 < nchroma ? 25*3: nchroma*3+(25-nchroma))+c] +
                                                      out_row[(24 < nchroma ? 24*3: nchroma*3+(24-nchroma))+c] +
                                                      -1 * out_x4[(24 < nchroma ? 24*3: nchroma*3+(24-nchroma))+c];
                    }
                }
                
                /* Kernel 27 */
                if (n > 26) {
                    for (int c = 0; c < (26 < nchroma ? 3: 1); c++) {
                        out_row[(26 < nchroma ? 26*3: nchroma*3+(26-nchroma))+c] = -1 * out_y4[(26 < nchroma ? 26*3: nchroma*3+(26-nchroma))+c] +
                                                      out_row[(25 < nchroma ? 25*3: nchroma*3+(25-nchroma))+c] +
                                                      -1 * out_y4[(25 < nchroma ? 25*3: nchroma*3+(25-nchroma))+c];
                    }
                }
                
                /* Kernel 28 */
                if (n > 27) {
                    for (int c = 0; c < (27 < nchroma ? 3: 1); c++) {
                        out_row[(27 < nchroma ? 27*3: nchroma*3+(27-nchroma))+c] = -1 * out_y2[(27 < nchroma ? 27*3: nchroma*3+(27-nchroma))+c] +
                                                      out_row[(26 < nchroma ? 26*3: nchroma*3+(26-nchroma))+c] +
                                                      -1 * out_y2[(26 < nchroma ? 26*3: nchroma*3+(26-nchroma))+c];
                    }
                }
                
                /* Kernel 29 */
                if (n > 28) {
                    for (int c = 0; c < (28 < nchroma ? 3: 1); c++) {
                        out_row[(28 < nchroma ? 28*3: nchroma*3+(28-nchroma))+c] = 1 * out_y4[(28 < nchroma ? 28*3: nchroma*3+(28-nchroma))+c] +
                                                      out_row[(27 < nchroma ? 27*3: nchroma*3+(27-nchroma))+c] +
                                                      1 * out_y4[(27 < nchroma ? 27*3: nchroma*3+(27-nchroma))+c];
                    }
                }
                
                /* Kernel 30 */
                if (n > 29) {
                    for (int c = 0; c < (29 < nchroma ? 3: 1); c++) {
                        out_row[(29 < nchroma ? 29*3: nchroma*3+(29-nchroma))+c] = -1 * out_y1[(29 < nchroma ? 29*3: nchroma*3+(29-nchroma))+c] +
                                                      out_row[(28 < nchroma ? 28*3: nchroma*3+(28-nchroma))+c] +
                                                      -1 * out_y1[(28 < nchroma ? 28*3: nchroma*3+(28-nchroma))+c];
                    }
                }
                
                /* Kernel 31 */
                if (n > 30) {
                    for (int c = 0; c < (30 < nchroma ? 3: 1); c++) {
                        out_row[(30 < nchroma ? 30*3: nchroma*3+(30-nchroma))+c] = -1 * out_y4[(30 < nchroma ? 30*3: nchroma*3+(30-nchroma))+c] +
                                                      out_row[(29 < nchroma ? 29*3: nchroma*3+(29-nchroma))+c] +
                                                      -1 * out_y4[(29 < nchroma ? 29*3: nchroma*3+(29-nchroma))+c];
                    }
                }
                
                /* Kernel 32 */
                if (n > 31) {
                    for (int c = 0; c < (31 < nchroma ? 3: 1); c++) {
                        out_row[(31 < nchroma ? 31*3: nchroma*3+(31-nchroma))+c] = 1 * out_x4[(31 < nchroma ? 31*3: nchroma*3+(31-nchroma))+c] +
                                                      out_row[(30 < nchroma ? 30*3: nchroma*3+(30-nchroma))+c] +
                                                      1 * out_x4[(30 < nchroma ? 30*3: nchroma*3+(30-nchroma))+c];
                    }
                }
                
                /* Kernel 33 */
                if (n > 32) {
                    for (int c = 0; c < (32 < nchroma ? 3: 1); c++) {
                        out_row[(32 < nchroma ? 32*3: nchroma*3+(32-nchroma))+c] = 1 * out_x1[(32 < nchroma ? 32*3: nchroma*3+(32-nchroma))+c] +
                                                      out_row[(31 < nchroma ? 31*3: nchroma*3+(31-nchroma))+c] +
                                                      1 * out_x1[(31 < nchroma ? 31*3: nchroma*3+(31-nchroma))+c];
                    }
                }
                
                /* Kernel 34 */
                if (n > 33) {
                    for (int c = 0; c < (33 < nchroma ? 3: 1); c++) {
                        out_row[(33 < nchroma ? 33*3: nchroma*3+(33-nchroma))+c] = -1 * out_x4[(33 < nchroma ? 33*3: nchroma*3+(33-nchroma))+c] +
                                                      out_row[(32 < nchroma ? 32*3: nchroma*3+(32-nchroma))+c] +
                                                      -1 * out_x4[(32 < nchroma ? 32*3: nchroma*3+(32-nchroma))+c];
                    }
                }
                
                /* Kernel 35 */
                if (n > 34) {
                    for (int c = 0; c < (34 < nchroma ? 3: 1); c++) {
                        out_row[(34 < nchroma ? 34*3: nchroma*3+(34-nchroma))+c] = 1 * out_x2[(34 < nchroma ? 34*3: nchroma*3+(34-nchroma))+c] +
                                                      out_row[(33 < nchroma ? 33*3: nchroma*3+(33-nchroma))+c] +
                                                      1 * out_x2[(33 < nchroma ? 33*3: nchroma*3+(33-nchroma))+c];
                    }
                }
                
                /* Kernel 36 */
                if (n > 35) {
                    for (int c = 0; c < (35 < nchroma ? 3: 1); c++) {
                        out_row[(35 < nchroma ? 35*3: nchroma*3+(35-nchroma))+c] = 1 * out_x4[(35 < nchroma ? 35*3: nchroma*3+(35-nchroma))+c] +
                                                      out_row[(34 < nchroma ? 34*3: nchroma*3+(34-nchroma))+c] +
                                                      1 * out_x4[(34 < nchroma ? 34*3: nchroma*3+(34-nchroma))+c];
                    }
                }
                
                /* Kernel 37 */
                if (n > 36) {
                    for (int c = 0; c < (36 < nchroma ? 3: 1); c++) {
                        out_row[(36 < nchroma ? 36*3: nchroma*3+(36-nchroma))+c] = 1 * out_y2[(36 < nchroma ? 36*3: nchroma*3+(36-nchroma))+c] +
                                                      out_row[(35 < nchroma ? 35*3: nchroma*3+(35-nchroma))+c] +
                                                      1 * out_y2[(35 < nchroma ? 35*3: nchroma*3+(35-nchroma))+c];
                    }
                }
                
                /* Kernel 38 */
                if (n > 37) {
                    for (int c = 0; c < (37 < nchroma ? 3: 1); c++) {
                        out_row[(37 < nchroma ? 37*3: nchroma*3+(37-nchroma))+c] = -1 * out_x4[(37 < nchroma ? 37*3: nchroma*3+(37-nchroma))+c] +
                                                      out_row[(36 < nchroma ? 36*3: nchroma*3+(36-nchroma))+c] +
                                                      -1 * out_x4[(36 < nchroma ? 36*3: nchroma*3+(36-nchroma))+c];
                    }
                }
                
                /* Kernel 39 */
                if (n > 38) {
                    for (int c = 0; c < (38 < nchroma ? 3: 1); c++) {
                        out_row[(38 < nchroma ? 38*3: nchroma*3+(38-nchroma))+c] = -1 * out_x2[(38 < nchroma ? 38*3: nchroma*3+(38-nchroma))+c] +
                                                      out_row[(37 < nchroma ? 37*3: nchroma*3+(37-nchroma))+c] +
                                                      -1 * out_x2[(37 < nchroma ? 37*3: nchroma*3+(37-nchroma))+c];
                    }
                }
                
                /* Kernel 40 */
                if (n > 39) {
                    for (int c = 0; c < (39 < nchroma ? 3: 1); c++) {
                        out_row[(39 < nchroma ? 39*3: nchroma*3+(39-nchroma))+c] = 1 * out_x4[(39 < nchroma ? 39*3: nchroma*3+(39-nchroma))+c] +
                                                      out_row[(38 < nchroma ? 38*3: nchroma*3+(38-nchroma))+c] +
                                                      1 * out_x4[(38 < nchroma ? 38*3: nchroma*3+(38-nchroma))+c];
                    }
                }
                
                /* Kernel 41 */
                if (n > 40) {
                    for (int c = 0; c < (40 < nchroma ? 3: 1); c++) {
                        out_row[(40 < nchroma ? 40*3: nchroma*3+(40-nchroma))+c] = -1 * out_x1[(40 < nchroma ? 40*3: nchroma*3+(40-nchroma))+c] +
                                                      out_row[(39 < nchroma ? 39*3: nchroma*3+(39-nchroma))+c] +
                                                      -1 * out_x1[(39 < nchroma ? 39*3: nchroma*3+(39-nchroma))+c];
                    }
                }
                
                /* Kernel 42 */
                if (n > 41) {
                    for (int c = 0; c < (41 < nchroma ? 3: 1); c++) {
                        out_row[(41 < nchroma ? 41*3: nchroma*3+(41-nchroma))+c] = -1 * out_x4[(41 < nchroma ? 41*3: nchroma*3+(41-nchroma))+c] +
                                                      out_row[(40 < nchroma ? 40*3: nchroma*3+(40-nchroma))+c] +
                                                      -1 * out_x4[(40 < nchroma ? 40*3: nchroma*3+(40-nchroma))+c];
                    }
                }
                
                /* Kernel 43 */
                if (n > 42) {
                    for (int c = 0; c < (42 < nchroma ? 3: 1); c++) {
                        out_row[(42 < nchroma ? 42*3: nchroma*3+(42-nchroma))+c] = 1 * out_x2[(42 < nchroma ? 42*3: nchroma*3+(42-nchroma))+c] +
                                                      out_row[(41 < nchroma ? 41*3: nchroma*3+(41-nchroma))+c] +
                                                      1 * out_x2[(41 < nchroma ? 41*3: nchroma*3+(41-nchroma))+c];
                    }
                }
                
                /* Kernel 44 */
                if (n > 43) {
                    for (int c = 0; c < (43 < nchroma ? 3: 1); c++) {
                        out_row[(43 < nchroma ? 43*3: nchroma*3+(43-nchroma))+c] = -1 * out_y2[(43 < nchroma ? 43*3: nchroma*3+(43-nchroma))+c] +
                                                      out_row[(42 < nchroma ? 42*3: nchroma*3+(42-nchroma))+c] +
                                                      -1 * out_y2[(42 < nchroma ? 42*3: nchroma*3+(42-nchroma))+c];
                    }
                }
                
                /* Kernel 45 */
                if (n > 44) {
                    for (int c = 0; c < (44 < nchroma ? 3: 1); c++) {
                        out_row[(44 < nchroma ? 44*3: nchroma*3+(44-nchroma))+c] = 1 * out_y4[(44 < nchroma ? 44*3: nchroma*3+(44-nchroma))+c] +
                                                      out_row[(43 < nchroma ? 43*3: nchroma*3+(43-nchroma))+c] +
                                                      1 * out_y4[(43 < nchroma ? 43*3: nchroma*3+(43-nchroma))+c];
                    }
                }
                
                /* Kernel 46 */
                if (n > 45) {
                    for (int c = 0; c < (45 < nchroma ? 3: 1); c++) {
                        out_row[(45 < nchroma ? 45*3: nchroma*3+(45-nchroma))+c] = 1 * out_y1[(45 < nchroma ? 45*3: nchroma*3+(45-nchroma))+c] +
                                                      out_row[(44 < nchroma ? 44*3: nchroma*3+(44-nchroma))+c] +
                                                      1 * out_y1[(44 < nchroma ? 44*3: nchroma*3+(44-nchroma))+c];
                    }
                }
                
                /* Kernel 47 */
                if (n > 46) {
                    for (int c = 0; c < (46 < nchroma ? 3: 1); c++) {
                        out_row[(46 < nchroma ? 46*3: nchroma*3+(46-nchroma))+c] = -1 * out_y4[(46 < nchroma ? 46*3: nchroma*3+(46-nchroma))+c] +
                                                      out_row[(45 < nchroma ? 45*3: nchroma*3+(45-nchroma))+c] +
                                                      -1 * out_y4[(45 < nchroma ? 45*3: nchroma*3+(45-nchroma))+c];
                    }
                }
                
                /* Kernel 48 */
                if (n > 47) {
                    for (int c = 0; c < (47 < nchroma ? 3: 1); c++) {
                        out_row[(47 < nchroma ? 47*3: nchroma*3+(47-nchroma))+c] = 1 * out_y2[(47 < nchroma ? 47*3: nchroma*3+(47-nchroma))+c] +
                                                      out_row[(46 < nchroma ? 46*3: nchroma*3+(46-nchroma))+c] +
                                                      1 * out_y2[(46 < nchroma ? 46*3: nchroma*3+(46-nchroma))+c];
                    }
                }
                
                /* Kernel 49 */
                if (n > 48) {
                    for (int c = 0; c < (48 < nchroma ? 3: 1); c++) {
                        out_row[(48 < nchroma ? 48*3: nchroma*3+(48-nchroma))+c] = 1 * out_y4[(48 < nchroma ? 48*3: nchroma*3+(48-nchroma))+c] +
                                                      out_row[(47 < nchroma ? 47*3: nchroma*3+(47-nchroma))+c] +
                                                      1 * out_y4[(47 < nchroma ? 47*3: nchroma*3+(47-nchroma))+c];
                    }
                }
                
                /* Kernel 50 */
                if (n > 49) {
                    for (int c = 0; c < (49 < nchroma ? 3: 1); c++) {
                        out_row[(49 < nchroma ? 49*3: nchroma*3+(49-nchroma))+c] = 1 * out_x4[(49 < nchroma ? 49*3: nchroma*3+(49-nchroma))+c] +
                                                      out_row[(48 < nchroma ? 48*3: nchroma*3+(48-nchroma))+c] +
                                                      1 * out_x4[(48 < nchroma ? 48*3: nchroma*3+(48-nchroma))+c];
                    }
                }
                
                /* Kernel 51 */
                if (n > 50) {
                    for (int c = 0; c < (50 < nchroma ? 3: 1); c++) {
                        out_row[(50 < nchroma ? 50*3: nchroma*3+(50-nchroma))+c] = -1 * out_y4[(50 < nchroma ? 50*3: nchroma*3+(50-nchroma))+c] +
                                                      out_row[(49 < nchroma ? 49*3: nchroma*3+(49-nchroma))+c] +
                                                      -1 * out_y4[(49 < nchroma ? 49*3: nchroma*3+(49-nchroma))+c];
                    }
                }
                
                /* Kernel 52 */
                if (n > 51) {
                    for (int c = 0; c < (51 < nchroma ? 3: 1); c++) {
                        out_row[(51 < nchroma ? 51*3: nchroma*3+(51-nchroma))+c] = -1 * out_y2[(51 < nchroma ? 51*3: nchroma*3+(51-nchroma))+c] +
                                                      out_row[(50 < nchroma ? 50*3: nchroma*3+(50-nchroma))+c] +
                                                      -1 * out_y2[(50 < nchroma ? 50*3: nchroma*3+(50-nchroma))+c];
                    }
                }
                
                /* Kernel 53 */
                if (n > 52) {
                    for (int c = 0; c < (52 < nchroma ? 3: 1); c++) {
                        out_row[(52 < nchroma ? 52*3: nchroma*3+(52-nchroma))+c] = 1 * out_y4[(52 < nchroma ? 52*3: nchroma*3+(52-nchroma))+c] +
                                                      out_row[(51 < nchroma ? 51*3: nchroma*3+(51-nchroma))+c] +
                                                      1 * out_y4[(51 < nchroma ? 51*3: nchroma*3+(51-nchroma))+c];
                    }
                }
                
                /* Kernel 54 */
                if (n > 53) {
                    for (int c = 0; c < (53 < nchroma ? 3: 1); c++) {
                        out_row[(53 < nchroma ? 53*3: nchroma*3+(53-nchroma))+c] = -1 * out_y1[(53 < nchroma ? 53*3: nchroma*3+(53-nchroma))+c] +
                                                      out_row[(52 < nchroma ? 52*3: nchroma*3+(52-nchroma))+c] +
                                                      -1 * out_y1[(52 < nchroma ? 52*3: nchroma*3+(52-nchroma))+c];
                    }
                }
                
                /* Kernel 55 */
                if (n > 54) {
                    for (int c = 0; c < (54 < nchroma ? 3: 1); c++) {
                        out_row[(54 < nchroma ? 54*3: nchroma*3+(54-nchroma))+c] = -1 * out_y4[(54 < nchroma ? 54*3: nchroma*3+(54-nchroma))+c] +
                                                      out_row[(53 < nchroma ? 53*3: nchroma*3+(53-nchroma))+c] +
                                                      -1 * out_y4[(53 < nchroma ? 53*3: nchroma*3+(53-nchroma))+c];
                    }
                }
                
                /* Kernel 56 */
                if (n > 55) {
                    for (int c = 0; c < (55 < nchroma ? 3: 1); c++) {
                        out_row[(55 < nchroma ? 55*3: nchroma*3+(55-nchroma))+c] = 1 * out_y2[(55 < nchroma ? 55*3: nchroma*3+(55-nchroma))+c] +
                                                      out_row[(54 < nchroma ? 54*3: nchroma*3+(54-nchroma))+c] +
                                                      1 * out_y2[(54 < nchroma ? 54*3: nchroma*3+(54-nchroma))+c];
                    }
                }
                
                /* Kernel 57 */
                if (n > 56) {
                    for (int c = 0; c < (56 < nchroma ? 3: 1); c++) {
                        out_row[(56 < nchroma ? 56*3: nchroma*3+(56-nchroma))+c] = 1 * out_y4[(56 < nchroma ? 56*3: nchroma*3+(56-nchroma))+c] +
                                                      out_row[(55 < nchroma ? 55*3: nchroma*3+(55-nchroma))+c] +
                                                      1 * out_y4[(55 < nchroma ? 55*3: nchroma*3+(55-nchroma))+c];
                    }
                }
                
                /* Kernel 58 */
                if (n > 57) {
                    for (int c = 0; c < (57 < nchroma ? 3: 1); c++) {
                        out_row[(57 < nchroma ? 57*3: nchroma*3+(57-nchroma))+c] = -1 * out_x4[(57 < nchroma ? 57*3: nchroma*3+(57-nchroma))+c] +
                                                      out_row[(56 < nchroma ? 56*3: nchroma*3+(56-nchroma))+c] +
                                                      -1 * out_x4[(56 < nchroma ? 56*3: nchroma*3+(56-nchroma))+c];
                    }
                }
                
                /* Kernel 59 */
                if (n > 58) {
                    for (int c = 0; c < (58 < nchroma ? 3: 1); c++) {
                        out_row[(58 < nchroma ? 58*3: nchroma*3+(58-nchroma))+c] = -1 * out_x2[(58 < nchroma ? 58*3: nchroma*3+(58-nchroma))+c] +
                                                      out_row[(57 < nchroma ? 57*3: nchroma*3+(57-nchroma))+c] +
                                                      -1 * out_x2[(57 < nchroma ? 57*3: nchroma*3+(57-nchroma))+c];
                    }
                }
                
                /* Kernel 60 */
                if (n > 59) {
                    for (int c = 0; c < (59 < nchroma ? 3: 1); c++) {
                        out_row[(59 < nchroma ? 59*3: nchroma*3+(59-nchroma))+c] = 1 * out_x4[(59 < nchroma ? 59*3: nchroma*3+(59-nchroma))+c] +
                                                      out_row[(58 < nchroma ? 58*3: nchroma*3+(58-nchroma))+c] +
                                                      1 * out_x4[(58 < nchroma ? 58*3: nchroma*3+(58-nchroma))+c];
                    }
                }
                
                /* Kernel 61 */
                if (n > 60) {
                    for (int c = 0; c < (60 < nchroma ? 3: 1); c++) {
                        out_row[(60 < nchroma ? 60*3: nchroma*3+(60-nchroma))+c] = 1 * out_x1[(60 < nchroma ? 60*3: nchroma*3+(60-nchroma))+c] +
                                                      out_row[(59 < nchroma ? 59*3: nchroma*3+(59-nchroma))+c] +
                                                      1 * out_x1[(59 < nchroma ? 59*3: nchroma*3+(59-nchroma))+c];
                    }
                }
                
                /* Kernel 62 */
                if (n > 61) {
                    for (int c = 0; c < (61 < nchroma ? 3: 1); c++) {
                        out_row[(61 < nchroma ? 61*3: nchroma*3+(61-nchroma))+c] = -1 * out_x4[(61 < nchroma ? 61*3: nchroma*3+(61-nchroma))+c] +
                                                      out_row[(60 < nchroma ? 60*3: nchroma*3+(60-nchroma))+c] +
                                                      -1 * out_x4[(60 < nchroma ? 60*3: nchroma*3+(60-nchroma))+c];
                    }
                }
                
                /* Kernel 63 */
                if (n > 62) {
                    for (int c = 0; c < (62 < nchroma ? 3: 1); c++) {
                        out_row[(62 < nchroma ? 62*3: nchroma*3+(62-nchroma))+c] = 1 * out_x2[(62 < nchroma ? 62*3: nchroma*3+(62-nchroma))+c] +
                                                      out_row[(61 < nchroma ? 61*3: nchroma*3+(61-nchroma))+c] +
                                                      1 * out_x2[(61 < nchroma ? 61*3: nchroma*3+(61-nchroma))+c];
                    }
                }
                
                /* Kernel 64 */
                if (n > 63) {
                    for (int c = 0; c < (63 < nchroma ? 3: 1); c++) {
                        out_row[(63 < nchroma ? 63*3: nchroma*3+(63-nchroma))+c] = 1 * out_x4[(63 < nchroma ? 63*3: nchroma*3+(63-nchroma))+c] +
                                                      out_row[(62 < nchroma ? 62*3: nchroma*3+(62-nchroma))+c] +
                                                      1 * out_x4[(62 < nchroma ? 62*3: nchroma*3+(62-nchroma))+c];
                    }
                }
                
        }
    }
#if TABLE_EXTRA_VERBOSE
    printf("gck y end\n"); fflush(stdout);
#endif
    
}


#define GCK_PATCHTABLE(in, out, params) gck<float, float>(in, out, params->ndims-params->nchroma*2, params->nchroma, params->patch_w)

/* gck<in_type, out_type>(in, out, n, nchroma, patch_w) -- Calculates grey code kernels */
template<class in_type, class out_type>
void gck(const Array<in_type> &in, Array<out_type> &out, int n, int nchroma, int patch_w) {
#if TABLE_EXTRA_VERBOSE
    printf("gck()\n"); fflush(stdout);
#endif
    if (0) {

    } else if (patch_w == 8) {
        if (0) {
        } else if (nchroma == 0) {
            if (0) { }
            
            else if (n == 3) { gck_8<in_type, out_type, 3, 0>(in, out); }
            else if (n == 4) { gck_8<in_type, out_type, 4, 0>(in, out); }
            else if (n == 5) { gck_8<in_type, out_type, 5, 0>(in, out); }
            else if (n == 6) { gck_8<in_type, out_type, 6, 0>(in, out); }
            else if (n == 7) { gck_8<in_type, out_type, 7, 0>(in, out); }
            else if (n == 8) { gck_8<in_type, out_type, 8, 0>(in, out); }
            else if (n == 9) { gck_8<in_type, out_type, 9, 0>(in, out); }
            else if (n == 10) { gck_8<in_type, out_type, 10, 0>(in, out); }
            else if (n == 11) { gck_8<in_type, out_type, 11, 0>(in, out); }
            else if (n == 12) { gck_8<in_type, out_type, 12, 0>(in, out); }
            else if (n == 20) { gck_8<in_type, out_type, 20, 0>(in, out); }
            else if (n == 25) { gck_8<in_type, out_type, 25, 0>(in, out); }
            else if (n == 30) { gck_8<in_type, out_type, 30, 0>(in, out); }
            else { fprintf(stderr, "gck: n, nchroma unsupported: %d, %d\n", n, nchroma); exit(1); }
            
        } else if (nchroma == 1) {
            if (0) { }
            
            else if (n == 1) { gck_8<in_type, out_type, 1, 1>(in, out); }
            else if (n == 2) { gck_8<in_type, out_type, 2, 1>(in, out); }
            else if (n == 3) { gck_8<in_type, out_type, 3, 1>(in, out); }
            else if (n == 4) { gck_8<in_type, out_type, 4, 1>(in, out); }
            else if (n == 5) { gck_8<in_type, out_type, 5, 1>(in, out); }
            else if (n == 6) { gck_8<in_type, out_type, 6, 1>(in, out); }
            else if (n == 7) { gck_8<in_type, out_type, 7, 1>(in, out); }
            else if (n == 8) { gck_8<in_type, out_type, 8, 1>(in, out); }
            else if (n == 9) { gck_8<in_type, out_type, 9, 1>(in, out); }
            else if (n == 10) { gck_8<in_type, out_type, 10, 1>(in, out); }
            else if (n == 18) { gck_8<in_type, out_type, 18, 1>(in, out); }
            else if (n == 23) { gck_8<in_type, out_type, 23, 1>(in, out); }
            else if (n == 28) { gck_8<in_type, out_type, 28, 1>(in, out); }
            else { fprintf(stderr, "gck: n, nchroma unsupported: %d, %d\n", n, nchroma); exit(1); }
            
        } else if (nchroma == 2) {
            if (0) { }
            
            else if (n == -1) { gck_8<in_type, out_type, -1, 2>(in, out); }
            else if (n == 0) { gck_8<in_type, out_type, 0, 2>(in, out); }
            else if (n == 1) { gck_8<in_type, out_type, 1, 2>(in, out); }
            else if (n == 2) { gck_8<in_type, out_type, 2, 2>(in, out); }
            else if (n == 3) { gck_8<in_type, out_type, 3, 2>(in, out); }
            else if (n == 4) { gck_8<in_type, out_type, 4, 2>(in, out); }
            else if (n == 5) { gck_8<in_type, out_type, 5, 2>(in, out); }
            else if (n == 6) { gck_8<in_type, out_type, 6, 2>(in, out); }
            else if (n == 7) { gck_8<in_type, out_type, 7, 2>(in, out); }
            else if (n == 8) { gck_8<in_type, out_type, 8, 2>(in, out); }
            else if (n == 16) { gck_8<in_type, out_type, 16, 2>(in, out); }
            else if (n == 21) { gck_8<in_type, out_type, 21, 2>(in, out); }
            else if (n == 26) { gck_8<in_type, out_type, 26, 2>(in, out); }
            else { fprintf(stderr, "gck: n, nchroma unsupported: %d, %d\n", n, nchroma); exit(1); }
            
        } else if (nchroma == 3) {
            if (0) { }
            
            else if (n == -3) { gck_8<in_type, out_type, -3, 3>(in, out); }
            else if (n == -2) { gck_8<in_type, out_type, -2, 3>(in, out); }
            else if (n == -1) { gck_8<in_type, out_type, -1, 3>(in, out); }
            else if (n == 0) { gck_8<in_type, out_type, 0, 3>(in, out); }
            else if (n == 1) { gck_8<in_type, out_type, 1, 3>(in, out); }
            else if (n == 2) { gck_8<in_type, out_type, 2, 3>(in, out); }
            else if (n == 3) { gck_8<in_type, out_type, 3, 3>(in, out); }
            else if (n == 4) { gck_8<in_type, out_type, 4, 3>(in, out); }
            else if (n == 5) { gck_8<in_type, out_type, 5, 3>(in, out); }
            else if (n == 6) { gck_8<in_type, out_type, 6, 3>(in, out); }
            else if (n == 14) { gck_8<in_type, out_type, 14, 3>(in, out); }
            else if (n == 19) { gck_8<in_type, out_type, 19, 3>(in, out); }
            else if (n == 24) { gck_8<in_type, out_type, 24, 3>(in, out); }
            else { fprintf(stderr, "gck: n, nchroma unsupported: %d, %d\n", n, nchroma); exit(1); }
            
        } else { fprintf(stderr, "gck: n, nchroma unsupported: %d, %d\n", n, nchroma); exit(1); }
        
    } else { fprintf(stderr, "gck: patch_w unsupported: %d\n", patch_w); exit(1); }
}
    
    
template<class in_type, class out_type>
void gck_no_pad(const Array<in_type> &in, Array<out_type> &out, int n, int nchroma, int patch_w) {
    int ew = in.width()-patch_w+1;
    int eh = in.height()-patch_w+1;
    int out_channels = n+nchroma*2;
    out.resize(eh, ew, out_channels);
    Array<out_type> temp;
    
    gck<in_type, out_type>(in, temp, n, nchroma, patch_w);
    vector<int> src_start({patch_w-1, patch_w-1, 0});
    vector<int> extent({eh, ew, out_channels});
    vector<int> dest_start({0, 0, 0});
    temp.copy_rect(out, src_start, dest_start, extent); 
}

#endif
